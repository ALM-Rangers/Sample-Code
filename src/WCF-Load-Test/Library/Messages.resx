<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CompileErrors" xml:space="preserve">
    <value>There were errors during code compilation for the service contract.</value>
  </data>
  <data name="Configuration_FileNotFound" xml:space="preserve">
    <value>The configuration file {0} does not exist.</value>
  </data>
  <data name="Configuration_InvalidFile" xml:space="preserve">
    <value>The file {0} is not a valid configuration file.</value>
  </data>
  <data name="ConfigurationX_CannotRemoveAssemblyFromNullList" xml:space="preserve">
    <value>The assembly list is null so cannot remove an entry</value>
  </data>
  <data name="ConfigurationX_CannotRemoveAssemblyIndex" xml:space="preserve">
    <value>There is not entry with index {0} is the assembly list</value>
  </data>
  <data name="DeserializerMessageContractNotSupported" xml:space="preserve">
    <value>The tool does not support certain types of configurations for message contracts. It does not support service side message logs with memory streams.</value>
  </data>
  <data name="DuplicateAction" xml:space="preserve">
    <value>Duplicate action found for {0}</value>
  </data>
  <data name="NoDataInTraceFile" xml:space="preserve">
    <value>The message log file did not contain any usable data. Please make sure that LogMessagesAtServiceLevel and LogEntireMessage are set</value>
  </data>
  <data name="ObjectGenerator_ArrayRank" xml:space="preserve">
    <value>Can only handle single-dimensional arrays</value>
  </data>
  <data name="ObjectGenerator_DictionaryParamsLength" xml:space="preserve">
    <value>Expected 2 generic parameters for type {0}, but found {1}</value>
  </data>
  <data name="ObjectGenerator_GenericCollectionOneTypeParameterExpected" xml:space="preserve">
    <value>Only generic collections with one type parameter are supported. Type {0} does not have one type parameter.</value>
  </data>
  <data name="ObjectGenerator_NestingLevel" xml:space="preserve">
    <value>The object graph is nested too deeply, make sure there are no cycles in it. The maximum nesting level allowed is {0}</value>
  </data>
  <data name="ObjectGenerator_NoDataOrMessageContract" xml:space="preserve">
    <value>Data or message contract attribute expected on type {0}</value>
  </data>
  <data name="ObjectGenerator_ObjectNotAnArray" xml:space="preserve">
    <value>Expected object of type {0} to be an array so that it can be matched to the collection type {1}</value>
  </data>
  <data name="ObjectGenerator_ObjectTypeMismatch" xml:space="preserve">
    <value>Expected object of type {0}, but was of type {1}</value>
  </data>
  <data name="ObjectGenerator_StreamObjectTypeMismatch1" xml:space="preserve">
    <value>Expected stream object derived from type {0}, but was of type {1}</value>
  </data>
  <data name="Parser_FileNotFound" xml:space="preserve">
    <value>The message log file {0} does not exist.</value>
  </data>
  <data name="Parser_InvalidMessageLogFile" xml:space="preserve">
    <value>The file {0} is not a valid message log file.</value>
  </data>
  <data name="Processor_MethodNotFound" xml:space="preserve">
    <value>Could not find method for SOAP action "{0}", check that the right proxy assemblies have been supplied.</value>
  </data>
  <data name="ProxyManager_FileNotFound" xml:space="preserve">
    <value>The assembly {0} does not exist.</value>
  </data>
  <data name="ProxyManager_InvalidAssembly" xml:space="preserve">
    <value>The file {0} is not a valid assembly.</value>
  </data>
  <data name="SRMAccessDenied" xml:space="preserve">
    <value>Access denied when trying to modify the configuration file.</value>
  </data>
  <data name="SRMExeNotFound" xml:space="preserve">
    <value>The executable '{0}' was not found</value>
  </data>
  <data name="UnexpectedSoapNamespace" xml:space="preserve">
    <value>Unexpected SOAP namespace {0} on soap envelope</value>
  </data>
  <data name="UTGenerator_ProxyConstructionComment" xml:space="preserve">
    <value>The following line may need to be customised to select the appropriate binding from the configuration file</value>
  </data>
  <data name="UTGenerator_ScenarioNameAndMethodNameConflict" xml:space="preserve">
    <value>The specified scenario name {0} is the same as one of the operations called, please use a different scenario name.</value>
  </data>
  <data name="UTGenerator_TypeNotSupported" xml:space="preserve">
    <value>The type {0} is not supported.</value>
  </data>
  <data name="DeserializerContractMethodNoDeclaringType" xml:space="preserve">
    <value>Contract method does not have a declaring type</value>
  </data>
  <data name="Parser_SetupAlreadyDone" xml:space="preserve">
    <value>Setup has already been called.</value>
  </data>
  <data name="Parser_SetupNotCalled" xml:space="preserve">
    <value>Setup must have been called first.</value>
  </data>
  <data name="ConfiguredTypeLoadError" xml:space="preserve">
    <value>Could not load the configured type "{0}". The error is: {1}</value>
  </data>
  <data name="ConfiguredTypeMismatch" xml:space="preserve">
    <value>The configured type "{0}" does not implement {1}.</value>
  </data>
  <data name="Parser_TraceFileFound" xml:space="preserve">
    <value>The file {0} is a trace file, a message log file is required.</value>
  </data>
  <data name="UnknownError" xml:space="preserve">
    <value>Unknown error</value>
  </data>
  <data name="Parser_FilteredOut" xml:space="preserve">
    <value>[FILTERED OUT]</value>
  </data>
  <data name="Parser_OK" xml:space="preserve">
    <value> [OK]</value>
  </data>
  <data name="Parser_ParsedMessage" xml:space="preserve">
    <value>Parsed message with action {0}</value>
  </data>
</root>