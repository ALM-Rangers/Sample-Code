//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.239.
// 
#pragma warning disable 1591

namespace Library.Test.Integration.AsmxServiceReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TestAsmxServiceSoap", Namespace="http://contoso.com/asmxservice/test")]
    public partial class TestAsmxService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ProcessSimpleAsmxRequestWrappedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessMultipleParametersWrappedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessSimpleAsmxRequestBareOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TestAsmxService() {
            this.Url = global::Library.Test.Integration.Properties.Settings.Default.Microsoft_WcfUnit_Library_Test_Integration_AsmxServiceReference_TestAsmxService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ProcessSimpleAsmxRequestWrappedCompletedEventHandler ProcessSimpleAsmxRequestWrappedCompleted;
        
        /// <remarks/>
        public event ProcessMultipleParametersWrappedCompletedEventHandler ProcessMultipleParametersWrappedCompleted;
        
        /// <remarks/>
        public event ProcessSimpleAsmxRequestBareCompletedEventHandler ProcessSimpleAsmxRequestBareCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://contoso.com/asmxservice/test/ProcessSimpleAsmxRequestWrapped", RequestNamespace="http://contoso.com/asmxservice/test", ResponseNamespace="http://contoso.com/asmxservice/test", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcessSimpleAsmxRequestWrapped(SimpleAsmxRequest r) {
            object[] results = this.Invoke("ProcessSimpleAsmxRequestWrapped", new object[] {
                        r});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessSimpleAsmxRequestWrappedAsync(SimpleAsmxRequest r) {
            this.ProcessSimpleAsmxRequestWrappedAsync(r, null);
        }
        
        /// <remarks/>
        public void ProcessSimpleAsmxRequestWrappedAsync(SimpleAsmxRequest r, object userState) {
            if ((this.ProcessSimpleAsmxRequestWrappedOperationCompleted == null)) {
                this.ProcessSimpleAsmxRequestWrappedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessSimpleAsmxRequestWrappedOperationCompleted);
            }
            this.InvokeAsync("ProcessSimpleAsmxRequestWrapped", new object[] {
                        r}, this.ProcessSimpleAsmxRequestWrappedOperationCompleted, userState);
        }
        
        private void OnProcessSimpleAsmxRequestWrappedOperationCompleted(object arg) {
            if ((this.ProcessSimpleAsmxRequestWrappedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessSimpleAsmxRequestWrappedCompleted(this, new ProcessSimpleAsmxRequestWrappedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://contoso.com/asmxservice/test/ProcessMultipleParametersWrapped", RequestNamespace="http://contoso.com/asmxservice/test", ResponseNamespace="http://contoso.com/asmxservice/test", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcessMultipleParametersWrapped(int a, string b) {
            object[] results = this.Invoke("ProcessMultipleParametersWrapped", new object[] {
                        a,
                        b});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessMultipleParametersWrappedAsync(int a, string b) {
            this.ProcessMultipleParametersWrappedAsync(a, b, null);
        }
        
        /// <remarks/>
        public void ProcessMultipleParametersWrappedAsync(int a, string b, object userState) {
            if ((this.ProcessMultipleParametersWrappedOperationCompleted == null)) {
                this.ProcessMultipleParametersWrappedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessMultipleParametersWrappedOperationCompleted);
            }
            this.InvokeAsync("ProcessMultipleParametersWrapped", new object[] {
                        a,
                        b}, this.ProcessMultipleParametersWrappedOperationCompleted, userState);
        }
        
        private void OnProcessMultipleParametersWrappedOperationCompleted(object arg) {
            if ((this.ProcessMultipleParametersWrappedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessMultipleParametersWrappedCompleted(this, new ProcessMultipleParametersWrappedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://contoso.com/asmxservice/test/ProcessSimpleAsmxRequestBare", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://contoso.com/asmxservice/test")]
        public string ProcessSimpleAsmxRequestBare([System.Xml.Serialization.XmlElementAttribute(Namespace="http://contoso.com/asmxservice/test")] SimpleAsmxRequest r) {
            object[] results = this.Invoke("ProcessSimpleAsmxRequestBare", new object[] {
                        r});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessSimpleAsmxRequestBareAsync(SimpleAsmxRequest r) {
            this.ProcessSimpleAsmxRequestBareAsync(r, null);
        }
        
        /// <remarks/>
        public void ProcessSimpleAsmxRequestBareAsync(SimpleAsmxRequest r, object userState) {
            if ((this.ProcessSimpleAsmxRequestBareOperationCompleted == null)) {
                this.ProcessSimpleAsmxRequestBareOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessSimpleAsmxRequestBareOperationCompleted);
            }
            this.InvokeAsync("ProcessSimpleAsmxRequestBare", new object[] {
                        r}, this.ProcessSimpleAsmxRequestBareOperationCompleted, userState);
        }
        
        private void OnProcessSimpleAsmxRequestBareOperationCompleted(object arg) {
            if ((this.ProcessSimpleAsmxRequestBareCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessSimpleAsmxRequestBareCompleted(this, new ProcessSimpleAsmxRequestBareCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://contoso.com/asmxservice/test")]
    public partial class SimpleAsmxRequest {
        
        private string bField;
        
        private int aField;
        
        /// <remarks/>
        public string B {
            get {
                return this.bField;
            }
            set {
                this.bField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int A {
            get {
                return this.aField;
            }
            set {
                this.aField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessSimpleAsmxRequestWrappedCompletedEventHandler(object sender, ProcessSimpleAsmxRequestWrappedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessSimpleAsmxRequestWrappedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessSimpleAsmxRequestWrappedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessMultipleParametersWrappedCompletedEventHandler(object sender, ProcessMultipleParametersWrappedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessMultipleParametersWrappedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessMultipleParametersWrappedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessSimpleAsmxRequestBareCompletedEventHandler(object sender, ProcessSimpleAsmxRequestBareCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessSimpleAsmxRequestBareCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessSimpleAsmxRequestBareCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591