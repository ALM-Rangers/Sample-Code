//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18046
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedSampleTestWithProxyFromServerTrace
{
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using System.Collections.Generic;
    
    
    [TestClass()]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1001:TypesThatOwnDisposableFieldsShouldBeDisposable", Justification="proxy should not be disposed")]
    public partial class GeneratedSampleTestWithProxyFromServerTraceTests
    {
        
        private TestContext _testContext;
        
        private Contracts.IArithmetic arithmeticClient;
        
        private Contracts.ICollections collectionsClient;
        
        private Contracts.Custom.ICustomContracts customContractsClient;
        
        private Contracts.Custom.ICustomContracts2 customContracts2Client;
        
        private Contracts.IBufferedStreamService bufferedStreamServiceClient;
        
        private Contracts.IStreamedStreamService streamedStreamServiceClient;
        
        private Contracts.IShapeService shapeServiceClient;
        
        private Contracts.IServiceKnownType serviceKnownTypeClient;
        
        private Contracts.ISharePrices sharePricesClient;
        
        private Contracts.IDataSets dataSetsClient;
        
        public TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [TestMethod()]
        public void GeneratedSampleTestWithProxyFromServerTrace()
        {
            // 01/07/2010 08:30:33
            this.Add();
            // 01/07/2010 08:30:33
            this.Add2();
            // 01/07/2010 08:30:33
            this.Add3();
            // 01/07/2010 08:30:33
            this.WrappedAdd();
            // 01/07/2010 08:30:33
            this.WrappednoCustomNamesAdd();
            // 01/07/2010 08:30:33
            this.WrappedMessageWithHeaderAndBodyNamespaceOverrides();
            // 01/07/2010 08:30:33
            this.UnwrappedAdd();
            // 01/07/2010 08:30:33
            this.NoParameters();
            // 01/07/2010 08:30:33
            this.RefParameter();
            // 01/07/2010 08:30:33
            this.RefObjectParameter();
            // 01/07/2010 08:30:33
            this.OutParameter();
            // 01/07/2010 08:30:33
            this.MixedDirectionParameters();
            // 01/07/2010 08:30:33
            this.OneWayOperation();
            // 01/07/2010 08:30:33
            this.ProcessCollection();
            // 01/07/2010 08:30:33
            this.ProcessCollection2();
            // 01/07/2010 08:30:33
            this.Overload();
            // 01/07/2010 08:30:33
            this.Overload2();
            // 01/07/2010 08:30:33
            this.Hidden();
            // 01/07/2010 08:30:33
            this.Contract2Method();
            // 01/07/2010 08:30:33
            this.BufferedStreamOperation();
            // 01/07/2010 08:30:33
            this.BufferedMemoryStreamOperation();
            // 01/07/2010 08:30:33
            this.StreamedStreamOperation();
            // 01/07/2010 08:30:33
            this.StreamedMemoryStreamOperation();
            // 01/07/2010 08:30:33
            this.StreamedWithNonStreamParametersOperation();
            // 01/07/2010 08:30:33
            this.BufferedUnwrappedMessageWithMemoryStream();
            // 01/07/2010 08:30:33
            this.BufferedUnwrappedMessageWithStream();
            // 01/07/2010 08:30:33
            this.BufferedWrappedMessageWithMemoryStream();
            // 01/07/2010 08:30:33
            this.BufferedWrappedMessageWithStream();
            // 01/07/2010 08:30:33
            this.StreamedUnwrappedMessageWithMemoryStream();
            // 01/07/2010 08:30:33
            this.StreamedUnwrappedMessageWithStream();
            // 01/07/2010 08:30:33
            this.StreamedWrappedMessageWithMemoryStream();
            // 01/07/2010 08:30:33
            this.StreamedWrappedMessageWithStream();
            // 01/07/2010 08:30:33
            this.DoSomething();
            // 01/07/2010 08:30:33
            this.DoSomething2();
            // 01/07/2010 08:30:37
            this.RegisterForNotificationOneWay();
            // 01/07/2010 08:30:38
            this.RegisterForNotificationTwoWay();
            // 01/07/2010 08:30:38
            this.ProcessDataSet();
            // 01/07/2010 08:30:38
            this.ProcessDataSetWithMoreData();
            // 01/07/2010 08:30:38
            this.ProcessCompoundDataSet();
            // 01/07/2010 08:30:38
            this.ProcessTypedDataSet();
            // 01/07/2010 08:30:38
            this.ProcessCompoundTypedDataSet();
        }
        
        private Contracts.Response Add()
        {
            Contracts.AddRequest request = new Contracts.AddRequest();
            request.A = 10;
            request.B = 5;
            this.CustomiseAdd(request);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_Add");
            try
            {
                return arithmeticClient.Add(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_Add");
            }
        }
        
        private int Add2()
        {
            Contracts.AddRequest request = new Contracts.AddRequest();
            request.A = 10;
            request.B = 5;
            this.CustomiseAdd2(request);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_Add2");
            try
            {
                return arithmeticClient.Add2(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_Add2");
            }
        }
        
        private int Add3()
        {
            int a = 20;
            int b = 25;
            this.CustomiseAdd3(ref a, ref b);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_Add3");
            try
            {
                return arithmeticClient.Add3(a, b);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_Add3");
            }
        }
        
        private void WrappedAdd()
        {
            Contracts.AddRequestWrappedMessage request = new Contracts.AddRequestWrappedMessage();
            request.header = new Contracts.TestHeader();
            request.header.Header = "hello";
            request.A = 11;
            request.B = 6;
            this.CustomiseWrappedAdd(request);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_WrappedAdd");
            try
            {
                arithmeticClient.WrappedAdd(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_WrappedAdd");
            }
        }
        
        private void WrappednoCustomNamesAdd()
        {
            Contracts.AddRequestWrappedMessageNoCustomNames request = new Contracts.AddRequestWrappedMessageNoCustomNames();
            request.header = new Contracts.TestHeader();
            request.header.Header = "hello";
            request.A = 11;
            request.B = 6;
            this.CustomiseWrappednoCustomNamesAdd(request);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_WrappednoCustomNamesAdd");
            try
            {
                arithmeticClient.WrappednoCustomNamesAdd(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_WrappednoCustomNamesAdd");
            }
        }
        
        private void WrappedMessageWithHeaderAndBodyNamespaceOverrides()
        {
            Contracts.AddRequestWrappedMessageWithHeaderAndBodyNamespaceOverrides request = new Contracts.AddRequestWrappedMessageWithHeaderAndBodyNamespaceOverrides();
            request.header = new Contracts.TestHeader();
            request.header.Header = "hello";
            request.A = 11;
            request.B = 6;
            this.CustomiseWrappedMessageWithHeaderAndBodyNamespaceOverrides(request);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_WrappedMessageWithHeaderAndBodyNamesp" +
                    "aceOverrides");
            try
            {
                arithmeticClient.WrappedMessageWithHeaderAndBodyNamespaceOverrides(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_WrappedMessageWithHeaderAndBodyNamesp" +
                        "aceOverrides");
            }
        }
        
        private void UnwrappedAdd()
        {
            Contracts.AddRequestUnwrappedMessage request = new Contracts.AddRequestUnwrappedMessage();
            request.header = new Contracts.TestHeader();
            request.header.Header = "hello";
            request.A = 11;
            request.B = 6;
            this.CustomiseUnwrappedAdd(request);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_UnwrappedAdd");
            try
            {
                arithmeticClient.UnwrappedAdd(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_UnwrappedAdd");
            }
        }
        
        private void NoParameters()
        {
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_NoParameters");
            try
            {
                arithmeticClient.NoParameters();
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_NoParameters");
            }
        }
        
        private void RefParameter()
        {
            int a = 0;
            this.CustomiseRefParameter(ref a);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_RefParameter");
            try
            {
                arithmeticClient.RefParameter(ref a);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_RefParameter");
            }
        }
        
        private void RefObjectParameter()
        {
            string a = "hello";
            object b = null;
            this.CustomiseRefObjectParameter(a, b);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_RefObjectParameter");
            try
            {
                arithmeticClient.RefObjectParameter(a, ref b);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_RefObjectParameter");
            }
        }
        
        private void OutParameter()
        {
            int a;
            int b;
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_OutParameter");
            try
            {
                arithmeticClient.OutParameter(out a, out b);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_OutParameter");
            }
        }
        
        private void MixedDirectionParameters()
        {
            int a = 1;
            int b = 23;
            int c;
            this.CustomiseMixedDirectionParameters(ref a, ref b);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_MixedDirectionParameters");
            try
            {
                arithmeticClient.MixedDirectionParameters(a, ref b, out c);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_MixedDirectionParameters");
            }
        }
        
        private void OneWayOperation()
        {
            int a = 5;
            this.CustomiseOneWayOperation(ref a);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_OneWayOperation");
            try
            {
                arithmeticClient.OneWayOperation(a);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_OneWayOperation");
            }
        }
        
        private Contracts.CollectionsData ProcessCollection()
        {
            Contracts.CollectionsData data = new Contracts.CollectionsData();
            data.ArrayList = new System.Collections.ArrayList();
            data.ArrayList.Add(1);
            data.ArrayList.Add(2);
            data.ArrayList.Add(3);
            data.IntList = null;
            data.IntIList = new System.Collections.ObjectModel.Collection<int>();
            data.IntIList.Add(7);
            data.IntIList.Add(8);
            data.IntIList.Add(9);
            data.RequestList = new System.Collections.Generic.List<Contracts.AddRequest>();
            Contracts.AddRequest temp0 = new Contracts.AddRequest();
            temp0.A = 1;
            temp0.B = 2;
            data.RequestList.Add(temp0);
            Contracts.AddRequest temp1 = new Contracts.AddRequest();
            temp1.A = 3;
            temp1.B = 4;
            data.RequestList.Add(temp1);
            data.RequestIList = new System.Collections.ObjectModel.Collection<Contracts.AddRequest>();
            Contracts.AddRequest temp2 = new Contracts.AddRequest();
            temp2.A = 1;
            temp2.B = 2;
            data.RequestIList.Add(temp2);
            Contracts.AddRequest temp3 = new Contracts.AddRequest();
            temp3.A = 3;
            temp3.B = 4;
            data.RequestIList.Add(temp3);
            data.RequestDictionary = new System.Collections.Generic.Dictionary<string, Contracts.AddRequest>();
            Contracts.AddRequest temp4 = new Contracts.AddRequest();
            temp4.A = 1;
            temp4.B = 2;
            data.RequestDictionary.Add("Key1", temp4);
            Contracts.AddRequest temp5 = new Contracts.AddRequest();
            temp5.A = 3;
            temp5.B = 4;
            data.RequestDictionary.Add("Key2", temp5);
            data.RequestIDictionary = new System.Collections.Generic.Dictionary<string, Contracts.AddRequest>();
            Contracts.AddRequest temp6 = new Contracts.AddRequest();
            temp6.A = 1;
            temp6.B = 2;
            data.RequestIDictionary.Add("Key1", temp6);
            Contracts.AddRequest temp7 = new Contracts.AddRequest();
            temp7.A = 3;
            temp7.B = 4;
            data.RequestIDictionary.Add("Key2", temp7);
            data.NonGenericEnumerableOnlyCollection = new Contracts.NonGenericEnumerableOnlyCollection();
            data.NonGenericEnumerableOnlyCollection.Add(0);
            data.NonGenericEnumerableOnlyCollection.Add("hello");
            data.Hashtable = new System.Collections.Hashtable();
            data.Hashtable.Add(2, "two");
            data.Hashtable.Add(1, "one");
            data.Element = null;
            data.Nodes = null;
            data.SqlData = null;
            this.CustomiseProcessCollection(data);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_ProcessCollection");
            try
            {
                return collectionsClient.ProcessCollection(data);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_ProcessCollection");
            }
        }
        
        private Contracts.CollectionsData ProcessCollection2()
        {
            Contracts.CollectionsData data = new Contracts.CollectionsData();
            data.ArrayList = null;
            data.IntList = null;
            data.IntIList = null;
            data.RequestList = null;
            data.RequestIList = null;
            data.RequestDictionary = null;
            data.RequestIDictionary = null;
            data.NonGenericEnumerableOnlyCollection = null;
            data.Hashtable = null;
            System.Xml.XmlDocument temp0 = new System.Xml.XmlDocument();
            temp0.LoadXml("<test xmlns=\"\">Element</test>");
            data.Element = temp0.DocumentElement;
            data.Nodes = new System.Xml.XmlNode[2];
            System.Xml.XmlDocument temp1 = new System.Xml.XmlDocument();
            temp1.LoadXml("<test xmlns=\"\"><node>one</node></test>");
            data.Nodes[0] = temp1.DocumentElement;
            System.Xml.XmlDocument temp2 = new System.Xml.XmlDocument();
            temp2.LoadXml("<test xmlns=\"\"><node>two</node></test>");
            data.Nodes[1] = temp2.DocumentElement;
            data.SqlData = null;
            this.CustomiseProcessCollection2(data);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_ProcessCollection");
            try
            {
                return collectionsClient.ProcessCollection(data);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_ProcessCollection");
            }
        }
        
        private void Overload()
        {
            int a = 23;
            this.CustomiseOverload(ref a);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_Overload");
            try
            {
                customContractsClient.Overload(a);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_Overload");
            }
        }
        
        private void Overload2()
        {
            string a = "abc";
            this.CustomiseOverload2(ref a);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_Overload");
            try
            {
                customContractsClient.Overload(a);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_Overload");
            }
        }
        
        private void Hidden()
        {
            string a = "def";
            this.CustomiseHidden(ref a);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_Hidden");
            try
            {
                customContractsClient.Hidden(a);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_Hidden");
            }
        }
        
        private void Contract2Method()
        {
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_Contract2Method");
            try
            {
                customContracts2Client.Contract2Method();
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_Contract2Method");
            }
        }
        
        private System.IO.Stream BufferedStreamOperation()
        {
            System.IO.Stream input = null;
            this.CustomiseBufferedStreamOperation(out input);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_BufferedStreamOperation");
            try
            {
                return bufferedStreamServiceClient.BufferedStreamOperation(input);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_BufferedStreamOperation");
            }
        }
        
        private System.IO.MemoryStream BufferedMemoryStreamOperation()
        {
            System.IO.MemoryStream input = null;
            this.CustomiseBufferedMemoryStreamOperation(out input);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_BufferedMemoryStreamOperation");
            try
            {
                return bufferedStreamServiceClient.BufferedMemoryStreamOperation(input);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_BufferedMemoryStreamOperation");
            }
        }
        
        private System.IO.Stream StreamedStreamOperation()
        {
            System.IO.Stream input = null;
            this.CustomiseStreamedStreamOperation(out input);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_StreamedStreamOperation");
            try
            {
                return streamedStreamServiceClient.StreamedStreamOperation(input);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_StreamedStreamOperation");
            }
        }
        
        private System.IO.MemoryStream StreamedMemoryStreamOperation()
        {
            System.IO.MemoryStream input = null;
            this.CustomiseStreamedMemoryStreamOperation(out input);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_StreamedMemoryStreamOperation");
            try
            {
                return streamedStreamServiceClient.StreamedMemoryStreamOperation(input);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_StreamedMemoryStreamOperation");
            }
        }
        
        private void StreamedWithNonStreamParametersOperation()
        {
            string s = null;
            int i;
            this.CustomiseStreamedWithNonStreamParametersOperation(ref s, out i);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_StreamedWithNonStreamParametersOperat" +
                    "ion");
            try
            {
                streamedStreamServiceClient.StreamedWithNonStreamParametersOperation(s, i);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_StreamedWithNonStreamParametersOperat" +
                        "ion");
            }
        }
        
        private void BufferedUnwrappedMessageWithMemoryStream()
        {
            Contracts.BufferedUnwrappedMessageWithMemoryStream input = new Contracts.BufferedUnwrappedMessageWithMemoryStream();
            input.Header = 1;
            input.Body2 = new System.IO.MemoryStream();
            this.CustomiseBufferedUnwrappedMessageWithMemoryStream(input);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_BufferedUnwrappedMessageWithMemoryStr" +
                    "eam");
            try
            {
                bufferedStreamServiceClient.BufferedUnwrappedMessageWithMemoryStream(input);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_BufferedUnwrappedMessageWithMemoryStr" +
                        "eam");
            }
        }
        
        private void BufferedUnwrappedMessageWithStream()
        {
            Contracts.BufferedUnwrappedMessageWithStream input = new Contracts.BufferedUnwrappedMessageWithStream();
            input.Header = 1;
            input.Body1 = null;
            this.CustomiseBufferedUnwrappedMessageWithStream(input);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_BufferedUnwrappedMessageWithStream");
            try
            {
                bufferedStreamServiceClient.BufferedUnwrappedMessageWithStream(input);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_BufferedUnwrappedMessageWithStream");
            }
        }
        
        private void BufferedWrappedMessageWithMemoryStream()
        {
            Contracts.BufferedWrappedMessageWithMemoryStream input = new Contracts.BufferedWrappedMessageWithMemoryStream();
            input.Header = 1;
            input.Body4 = new System.IO.MemoryStream();
            this.CustomiseBufferedWrappedMessageWithMemoryStream(input);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_BufferedWrappedMessageWithMemoryStrea" +
                    "m");
            try
            {
                bufferedStreamServiceClient.BufferedWrappedMessageWithMemoryStream(input);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_BufferedWrappedMessageWithMemoryStrea" +
                        "m");
            }
        }
        
        private void BufferedWrappedMessageWithStream()
        {
            Contracts.BufferedWrappedMessageWithStream input = new Contracts.BufferedWrappedMessageWithStream();
            input.Header = 1;
            input.Body3 = null;
            this.CustomiseBufferedWrappedMessageWithStream(input);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_BufferedWrappedMessageWithStream");
            try
            {
                bufferedStreamServiceClient.BufferedWrappedMessageWithStream(input);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_BufferedWrappedMessageWithStream");
            }
        }
        
        private void StreamedUnwrappedMessageWithMemoryStream()
        {
            Contracts.StreamedUnwrappedMessageWithMemoryStream input = new Contracts.StreamedUnwrappedMessageWithMemoryStream();
            input.Header = 0;
            input.Body2 = null;
            this.CustomiseStreamedUnwrappedMessageWithMemoryStream(input);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_StreamedUnwrappedMessageWithMemoryStr" +
                    "eam");
            try
            {
                streamedStreamServiceClient.StreamedUnwrappedMessageWithMemoryStream(input);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_StreamedUnwrappedMessageWithMemoryStr" +
                        "eam");
            }
        }
        
        private void StreamedUnwrappedMessageWithStream()
        {
            Contracts.StreamedUnwrappedMessageWithStream input = new Contracts.StreamedUnwrappedMessageWithStream();
            input.Header = 1;
            input.Body1 = null;
            this.CustomiseStreamedUnwrappedMessageWithStream(input);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_StreamedUnwrappedMessageWithStream");
            try
            {
                streamedStreamServiceClient.StreamedUnwrappedMessageWithStream(input);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_StreamedUnwrappedMessageWithStream");
            }
        }
        
        private void StreamedWrappedMessageWithMemoryStream()
        {
            Contracts.StreamedWrappedMessageWithMemoryStream input = new Contracts.StreamedWrappedMessageWithMemoryStream();
            input.Header = 0;
            input.Body4 = null;
            this.CustomiseStreamedWrappedMessageWithMemoryStream(input);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_StreamedWrappedMessageWithMemoryStrea" +
                    "m");
            try
            {
                streamedStreamServiceClient.StreamedWrappedMessageWithMemoryStream(input);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_StreamedWrappedMessageWithMemoryStrea" +
                        "m");
            }
        }
        
        private void StreamedWrappedMessageWithStream()
        {
            Contracts.StreamedWrappedMessageWithStream input = new Contracts.StreamedWrappedMessageWithStream();
            input.Header = 1;
            input.Body3 = null;
            this.CustomiseStreamedWrappedMessageWithStream(input);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_StreamedWrappedMessageWithStream");
            try
            {
                streamedStreamServiceClient.StreamedWrappedMessageWithStream(input);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_StreamedWrappedMessageWithStream");
            }
        }
        
        private Contracts.Shape DoSomething()
        {
            Contracts.Circle parameter = new Contracts.Circle();
            parameter.Radius = 0;
            parameter.Colour = 0;
            this.CustomiseDoSomething(parameter);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_DoSomething");
            try
            {
                return shapeServiceClient.DoSomething(parameter);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_DoSomething");
            }
        }
        
        private void DoSomething2()
        {
            Contracts.DerivedServiceKnownType arg = new Contracts.DerivedServiceKnownType();
            arg.DerivedProperty = "abc";
            arg.BaseProperty = 1;
            this.CustomiseDoSomething2(arg);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_DoSomething");
            try
            {
                serviceKnownTypeClient.DoSomething(arg);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_DoSomething");
            }
        }
        
        private void RegisterForNotificationOneWay()
        {
            string symbol = "MSFT";
            this.CustomiseRegisterForNotificationOneWay(ref symbol);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_RegisterForNotificationOneWay");
            try
            {
                sharePricesClient.RegisterForNotificationOneWay(symbol);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_RegisterForNotificationOneWay");
            }
        }
        
        private void RegisterForNotificationTwoWay()
        {
            string symbol = "MSFT";
            this.CustomiseRegisterForNotificationTwoWay(ref symbol);
            _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_RegisterForNotificationTwoWay");
            try
            {
                sharePricesClient.RegisterForNotificationTwoWay(symbol);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_RegisterForNotificationTwoWay");
            }
        }
        
        private System.Data.DataSet ProcessDataSet()
        {
            System.Data.DataSet data = null;
            try
            {
                data = new System.Data.DataSet();
                data.Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Tables.Add(new System.Data.DataTable("table1", "urn:table1"));
                data.Tables[0].Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Tables[0].Columns.Add("col1_1", typeof(int));
                data.Tables[0].Columns.Add("col1_2", typeof(string));
                data.Tables[0].Rows.Add(1, "hello1");
                data.Tables[0].Rows.Add(2, "hello2");
                data.Tables[0].Rows.Add(System.DBNull.Value, System.DBNull.Value);
                data.Tables.Add(new System.Data.DataTable("table2", "urn:table2"));
                data.Tables[1].Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Tables[1].Columns.Add("col2_1", typeof(bool));
                data.Tables[1].Columns.Add("col2_2", typeof(decimal));
                data.Tables[1].Rows.Add(true, 1.0m);
                data.Tables[1].Rows.Add(false, 99.0m);
                this.CustomiseProcessDataSet(data);
                _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_ProcessDataSet");
                try
                {
                    return dataSetsClient.ProcessDataSet(data);
                }
                finally
                {
                    _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_ProcessDataSet");
                }
            }
            finally
            {
                data.Dispose();
            }
        }
        
        private System.Data.DataSet ProcessDataSetWithMoreData()
        {
            System.Data.DataSet data = null;
            try
            {
                data = new System.Data.DataSet();
                data.Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Tables.Add(new System.Data.DataTable("table1", "urn:table1"));
                data.Tables[0].Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Tables[0].Columns.Add("col1_1", typeof(int));
                data.Tables[0].Columns.Add("col1_2", typeof(string));
                data.Tables[0].Rows.Add(1, "hello1");
                data.Tables[0].Rows.Add(2, "hello2");
                data.Tables[0].Rows.Add(System.DBNull.Value, System.DBNull.Value);
                data.Tables.Add(new System.Data.DataTable("table2", "urn:table2"));
                data.Tables[1].Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Tables[1].Columns.Add("col2_1", typeof(bool));
                data.Tables[1].Columns.Add("col2_2", typeof(decimal));
                data.Tables[1].Rows.Add(true, 1.0m);
                data.Tables[1].Rows.Add(false, 99.0m);
                int somedata = 1;
                this.CustomiseProcessDataSetWithMoreData(data, ref somedata);
                _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_ProcessDataSetWithMoreData");
                try
                {
                    return dataSetsClient.ProcessDataSetWithMoreData(data, somedata);
                }
                finally
                {
                    _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_ProcessDataSetWithMoreData");
                }
            }
            finally
            {
                data.Dispose();
            }
        }
        
        private void ProcessCompoundDataSet()
        {
            Contracts.CompoundWithDataSet data = new Contracts.CompoundWithDataSet();
            try
            {
                data.Data = new System.Data.DataSet();
                data.Data.Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Data.Tables.Add(new System.Data.DataTable("table1", "urn:table1"));
                data.Data.Tables[0].Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Data.Tables[0].Columns.Add("col1_1", typeof(int));
                data.Data.Tables[0].Columns.Add("col1_2", typeof(string));
                data.Data.Tables[0].Rows.Add(1, "hello1");
                data.Data.Tables[0].Rows.Add(2, "hello2");
                data.Data.Tables[0].Rows.Add(System.DBNull.Value, System.DBNull.Value);
                data.Data.Tables.Add(new System.Data.DataTable("table2", "urn:table2"));
                data.Data.Tables[1].Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Data.Tables[1].Columns.Add("col2_1", typeof(bool));
                data.Data.Tables[1].Columns.Add("col2_2", typeof(decimal));
                data.Data.Tables[1].Rows.Add(true, 1.0m);
                data.Data.Tables[1].Rows.Add(false, 99.0m);
                this.CustomiseProcessCompoundDataSet(data);
                _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_ProcessCompoundDataSet");
                try
                {
                    dataSetsClient.ProcessCompoundDataSet(data);
                }
                finally
                {
                    _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_ProcessCompoundDataSet");
                }
            }
            finally
            {
                data.Data.Dispose();
            }
        }
        
        private void ProcessTypedDataSet()
        {
            Contracts.TypedDataSet data = null;
            try
            {
                data = new Contracts.TypedDataSet();
                data.Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Tables[0].Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Tables[0].Rows.Add("hello1", 1, new System.DateTime(2010, 6, 29, 0, 0, 0, 0));
                data.Tables[0].Rows.Add("hello2", 2, new System.DateTime(2010, 5, 29, 0, 0, 0, 0));
                data.Tables[0].Rows.Add(System.DBNull.Value, System.DBNull.Value, System.DBNull.Value);
                this.CustomiseProcessTypedDataSet(data);
                _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_ProcessTypedDataSet");
                try
                {
                    dataSetsClient.ProcessTypedDataSet(data);
                }
                finally
                {
                    _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_ProcessTypedDataSet");
                }
            }
            finally
            {
                data.Dispose();
            }
        }
        
        private void ProcessCompoundTypedDataSet()
        {
            Contracts.CompoundWithTypedDataSet data = new Contracts.CompoundWithTypedDataSet();
            try
            {
                data.Data = new Contracts.TypedDataSet();
                data.Data.Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Data.Tables[0].Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Data.Tables[0].Rows.Add("hello1", 1, new System.DateTime(2010, 6, 29, 0, 0, 0, 0));
                data.Data.Tables[0].Rows.Add("hello2", 2, new System.DateTime(2010, 5, 29, 0, 0, 0, 0));
                data.Data.Tables[0].Rows.Add(System.DBNull.Value, System.DBNull.Value, System.DBNull.Value);
                this.CustomiseProcessCompoundTypedDataSet(data);
                _testContext.BeginTimer("GeneratedSampleTestWithProxyFromServerTrace_ProcessCompoundTypedDataSet");
                try
                {
                    dataSetsClient.ProcessCompoundTypedDataSet(data);
                }
                finally
                {
                    _testContext.EndTimer("GeneratedSampleTestWithProxyFromServerTrace_ProcessCompoundTypedDataSet");
                }
            }
            finally
            {
                data.Data.Dispose();
            }
        }
    }
}
