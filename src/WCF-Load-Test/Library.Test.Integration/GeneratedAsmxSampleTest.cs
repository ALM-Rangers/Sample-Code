//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18046
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedAsmxSampleTest
{
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using System.Collections.Generic;
    
    
    [TestClass()]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1001:TypesThatOwnDisposableFieldsShouldBeDisposable", Justification="proxy should not be disposed")]
    public partial class GeneratedAsmxSampleTestTests
    {
        
        private TestContext _testContext;
        
        private GeneratedContractsAsmx.TestAsmxServiceSoap testAsmxServiceSoapClient;
        
        public TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [TestMethod()]
        public void GeneratedAsmxSampleTest()
        {
            // 01/07/2010 08:55:16
            this.ProcessSimpleAsmxRequestWrapped();
            // 01/07/2010 08:55:17
            this.ProcessSimpleAsmxRequestBare();
            // 01/07/2010 08:55:18
            this.ProcessMultipleParametersWrapped();
            // 01/07/2010 08:55:18
            this.ProcessSimpleAsmxRequestWrapped2();
            // 01/07/2010 08:55:18
            this.ProcessSimpleAsmxRequestBare2();
            // 01/07/2010 08:55:18
            this.ProcessMultipleParametersWrapped2();
            // 01/07/2010 08:55:18
            this.WithNullableInt();
            // 01/07/2010 08:55:18
            this.WithNullableInt2();
            // 01/07/2010 08:55:18
            this.SimpleTypes();
            // 01/07/2010 08:55:18
            this.ScalarArray();
            // 01/07/2010 08:55:18
            this.XmlRequestMethod();
            // 01/07/2010 08:55:18
            this.CollectionMethod();
            // 01/07/2010 08:55:18
            this.ProcessShape();
            // 01/07/2010 08:55:18
            this.ProcessDataSet();
            // 01/07/2010 08:55:18
            this.ProcessDataSetWithMoreData();
            // 01/07/2010 08:55:18
            this.ProcessCompoundDataSet();
            // 01/07/2010 08:55:18
            this.ProcessTypedDataSet();
            // 01/07/2010 08:55:18
            this.ProcessCompoundTypedDataSet();
        }
        
        private string ProcessSimpleAsmxRequestWrapped()
        {
            GeneratedContractsAsmx.SimpleAsmxRequest r = new GeneratedContractsAsmx.SimpleAsmxRequest();
            r.B = "hello";
            r.Optional = 0;
            r.OptionalSpecified = false;
            r.A = 99;
            this.CustomiseProcessSimpleAsmxRequestWrapped(r);
            _testContext.BeginTimer("GeneratedAsmxSampleTest_ProcessSimpleAsmxRequestWrapped");
            try
            {
                return testAsmxServiceSoapClient.ProcessSimpleAsmxRequestWrapped(r);
            }
            finally
            {
                _testContext.EndTimer("GeneratedAsmxSampleTest_ProcessSimpleAsmxRequestWrapped");
            }
        }
        
        private GeneratedContractsAsmx.ProcessSimpleAsmxRequestBareResponse ProcessSimpleAsmxRequestBare()
        {
            GeneratedContractsAsmx.ProcessSimpleAsmxRequestBareRequest request = new GeneratedContractsAsmx.ProcessSimpleAsmxRequestBareRequest();
            request.r = new GeneratedContractsAsmx.SimpleAsmxRequest();
            request.r.B = "hello";
            request.r.Optional = 0;
            request.r.OptionalSpecified = false;
            request.r.A = 99;
            this.CustomiseProcessSimpleAsmxRequestBare(request);
            _testContext.BeginTimer("GeneratedAsmxSampleTest_ProcessSimpleAsmxRequestBare");
            try
            {
                return testAsmxServiceSoapClient.ProcessSimpleAsmxRequestBare(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedAsmxSampleTest_ProcessSimpleAsmxRequestBare");
            }
        }
        
        private string ProcessMultipleParametersWrapped()
        {
            int a = 99;
            string b = "hello";
            this.CustomiseProcessMultipleParametersWrapped(ref a, ref b);
            _testContext.BeginTimer("GeneratedAsmxSampleTest_ProcessMultipleParametersWrapped");
            try
            {
                return testAsmxServiceSoapClient.ProcessMultipleParametersWrapped(a, b);
            }
            finally
            {
                _testContext.EndTimer("GeneratedAsmxSampleTest_ProcessMultipleParametersWrapped");
            }
        }
        
        private string ProcessSimpleAsmxRequestWrapped2()
        {
            GeneratedContractsAsmx.SimpleAsmxRequest r = new GeneratedContractsAsmx.SimpleAsmxRequest();
            r.B = "hello";
            r.Optional = 0;
            r.OptionalSpecified = false;
            r.A = 99;
            this.CustomiseProcessSimpleAsmxRequestWrapped2(r);
            _testContext.BeginTimer("GeneratedAsmxSampleTest_ProcessSimpleAsmxRequestWrapped");
            try
            {
                return testAsmxServiceSoapClient.ProcessSimpleAsmxRequestWrapped(r);
            }
            finally
            {
                _testContext.EndTimer("GeneratedAsmxSampleTest_ProcessSimpleAsmxRequestWrapped");
            }
        }
        
        private GeneratedContractsAsmx.ProcessSimpleAsmxRequestBareResponse ProcessSimpleAsmxRequestBare2()
        {
            GeneratedContractsAsmx.ProcessSimpleAsmxRequestBareRequest request = new GeneratedContractsAsmx.ProcessSimpleAsmxRequestBareRequest();
            request.r = new GeneratedContractsAsmx.SimpleAsmxRequest();
            request.r.B = "hello";
            request.r.Optional = 0;
            request.r.OptionalSpecified = false;
            request.r.A = 99;
            this.CustomiseProcessSimpleAsmxRequestBare2(request);
            _testContext.BeginTimer("GeneratedAsmxSampleTest_ProcessSimpleAsmxRequestBare");
            try
            {
                return testAsmxServiceSoapClient.ProcessSimpleAsmxRequestBare(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedAsmxSampleTest_ProcessSimpleAsmxRequestBare");
            }
        }
        
        private string ProcessMultipleParametersWrapped2()
        {
            int a = 99;
            string b = "hello";
            this.CustomiseProcessMultipleParametersWrapped2(ref a, ref b);
            _testContext.BeginTimer("GeneratedAsmxSampleTest_ProcessMultipleParametersWrapped");
            try
            {
                return testAsmxServiceSoapClient.ProcessMultipleParametersWrapped(a, b);
            }
            finally
            {
                _testContext.EndTimer("GeneratedAsmxSampleTest_ProcessMultipleParametersWrapped");
            }
        }
        
        private GeneratedContractsAsmx.WithNullableIntResponse WithNullableInt()
        {
            GeneratedContractsAsmx.WithNullableIntRequest request = new GeneratedContractsAsmx.WithNullableIntRequest();
            request.r = null;
            this.CustomiseWithNullableInt(request);
            _testContext.BeginTimer("GeneratedAsmxSampleTest_WithNullableInt");
            try
            {
                return testAsmxServiceSoapClient.WithNullableInt(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedAsmxSampleTest_WithNullableInt");
            }
        }
        
        private GeneratedContractsAsmx.WithNullableIntResponse WithNullableInt2()
        {
            GeneratedContractsAsmx.WithNullableIntRequest request = new GeneratedContractsAsmx.WithNullableIntRequest();
            System.Nullable<int> temp0 = 1;
            request.r = temp0;
            this.CustomiseWithNullableInt2(request);
            _testContext.BeginTimer("GeneratedAsmxSampleTest_WithNullableInt");
            try
            {
                return testAsmxServiceSoapClient.WithNullableInt(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedAsmxSampleTest_WithNullableInt");
            }
        }
        
        private string SimpleTypes()
        {
            int i = 1;
            GeneratedContractsAsmx.ConsoleColor e = GeneratedContractsAsmx.ConsoleColor.Black;
            string s = "a";
            decimal d = 1.1m;
            System.DateTime dt = new System.DateTime(2010, 7, 1, 8, 55, 18, 73);
            System.Guid g = new System.Guid("5dd8865e-8d3c-49ce-ad07-a251ef753e27");
            System.Xml.XmlQualifiedName xqn = new System.Xml.XmlQualifiedName();
            this.CustomiseSimpleTypes(ref i, ref e, ref s, ref d, ref dt, ref g, xqn);
            _testContext.BeginTimer("GeneratedAsmxSampleTest_SimpleTypes");
            try
            {
                return testAsmxServiceSoapClient.SimpleTypes(i, e, s, d, dt, g, xqn);
            }
            finally
            {
                _testContext.EndTimer("GeneratedAsmxSampleTest_SimpleTypes");
            }
        }
        
        private int ScalarArray()
        {
            int[] a = new int[3];
            a[0] = 0;
            a[1] = 1;
            a[2] = 2;
            this.CustomiseScalarArray(a);
            _testContext.BeginTimer("GeneratedAsmxSampleTest_ScalarArray");
            try
            {
                return testAsmxServiceSoapClient.ScalarArray(a);
            }
            finally
            {
                _testContext.EndTimer("GeneratedAsmxSampleTest_ScalarArray");
            }
        }
        
        private void XmlRequestMethod()
        {
            GeneratedContractsAsmx.XmlAsmxRequest request = new GeneratedContractsAsmx.XmlAsmxRequest();
            System.Xml.XmlDocument temp0 = new System.Xml.XmlDocument();
            temp0.LoadXml("<test xmlns=\"\">Element</test>");
            request.Element = temp0.DocumentElement;
            request.Nodes = new System.Xml.XmlNode[2];
            System.Xml.XmlDocument temp1 = new System.Xml.XmlDocument();
            temp1.LoadXml("<test xmlns=\"\"><node>one</node></test>");
            request.Nodes[0] = temp1.DocumentElement;
            System.Xml.XmlDocument temp2 = new System.Xml.XmlDocument();
            temp2.LoadXml("<test xmlns=\"\"><node>two</node></test>");
            request.Nodes[1] = temp2.DocumentElement;
            this.CustomiseXmlRequestMethod(request);
            _testContext.BeginTimer("GeneratedAsmxSampleTest_XmlRequestMethod");
            try
            {
                testAsmxServiceSoapClient.XmlRequestMethod(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedAsmxSampleTest_XmlRequestMethod");
            }
        }
        
        private void CollectionMethod()
        {
            GeneratedContractsAsmx.CollectionsRequest data = new GeneratedContractsAsmx.CollectionsRequest();
            data.ArrayList = new object[2];
            int temp0 = 1;
            data.ArrayList[0] = temp0;
            string temp1 = "hello";
            data.ArrayList[1] = temp1;
            data.IntList = new int[3];
            data.IntList[0] = 0;
            data.IntList[1] = 1;
            data.IntList[2] = 2;
            data.RequestList = new GeneratedContractsAsmx.SimpleAsmxRequest[1];
            data.RequestList[0] = new GeneratedContractsAsmx.SimpleAsmxRequest();
            data.RequestList[0].B = null;
            data.RequestList[0].Optional = 0;
            data.RequestList[0].OptionalSpecified = false;
            data.RequestList[0].A = 0;
            data.RequestCollection = new GeneratedContractsAsmx.SimpleAsmxRequest[1];
            data.RequestCollection[0] = new GeneratedContractsAsmx.SimpleAsmxRequest();
            data.RequestCollection[0].B = null;
            data.RequestCollection[0].Optional = 0;
            data.RequestCollection[0].OptionalSpecified = false;
            data.RequestCollection[0].A = 0;
            data.NonGenericEnumerableOnlyCollection = new object[2];
            string temp2 = "hello";
            data.NonGenericEnumerableOnlyCollection[0] = temp2;
            int temp3 = 1;
            data.NonGenericEnumerableOnlyCollection[1] = temp3;
            this.CustomiseCollectionMethod(data);
            _testContext.BeginTimer("GeneratedAsmxSampleTest_CollectionMethod");
            try
            {
                testAsmxServiceSoapClient.CollectionMethod(data);
            }
            finally
            {
                _testContext.EndTimer("GeneratedAsmxSampleTest_CollectionMethod");
            }
        }
        
        private void ProcessShape()
        {
            GeneratedContractsAsmx.AsmxCircle shape = new GeneratedContractsAsmx.AsmxCircle();
            shape.Radius = 0;
            shape.Ignored = null;
            shape.Colour = 0;
            this.CustomiseProcessShape(shape);
            _testContext.BeginTimer("GeneratedAsmxSampleTest_ProcessShape");
            try
            {
                testAsmxServiceSoapClient.ProcessShape(shape);
            }
            finally
            {
                _testContext.EndTimer("GeneratedAsmxSampleTest_ProcessShape");
            }
        }
        
        private System.Data.DataSet ProcessDataSet()
        {
            System.Data.DataSet a = null;
            try
            {
                a = new System.Data.DataSet();
                a.Locale = System.Globalization.CultureInfo.InvariantCulture;
                a.Tables.Add(new System.Data.DataTable("table1", "urn:table1"));
                a.Tables[0].Locale = System.Globalization.CultureInfo.InvariantCulture;
                a.Tables[0].Columns.Add("col1_1", typeof(int));
                a.Tables[0].Columns.Add("col1_2", typeof(string));
                a.Tables[0].Rows.Add(1, "hello1");
                a.Tables[0].Rows.Add(2, "hello2");
                a.Tables[0].Rows.Add(System.DBNull.Value, System.DBNull.Value);
                a.Tables.Add(new System.Data.DataTable("table2", "urn:table2"));
                a.Tables[1].Locale = System.Globalization.CultureInfo.InvariantCulture;
                a.Tables[1].Columns.Add("col2_1", typeof(bool));
                a.Tables[1].Columns.Add("col2_2", typeof(decimal));
                a.Tables[1].Rows.Add(true, 1.0m);
                a.Tables[1].Rows.Add(false, 99.0m);
                this.CustomiseProcessDataSet(a);
                _testContext.BeginTimer("GeneratedAsmxSampleTest_ProcessDataSet");
                try
                {
                    return testAsmxServiceSoapClient.ProcessDataSet(a);
                }
                finally
                {
                    _testContext.EndTimer("GeneratedAsmxSampleTest_ProcessDataSet");
                }
            }
            finally
            {
                a.Dispose();
            }
        }
        
        private System.Data.DataSet ProcessDataSetWithMoreData()
        {
            System.Data.DataSet a = null;
            try
            {
                a = new System.Data.DataSet();
                a.Locale = System.Globalization.CultureInfo.InvariantCulture;
                a.Tables.Add(new System.Data.DataTable("table1", "urn:table1"));
                a.Tables[0].Locale = System.Globalization.CultureInfo.InvariantCulture;
                a.Tables[0].Columns.Add("col1_1", typeof(int));
                a.Tables[0].Columns.Add("col1_2", typeof(string));
                a.Tables[0].Rows.Add(1, "hello1");
                a.Tables[0].Rows.Add(2, "hello2");
                a.Tables[0].Rows.Add(System.DBNull.Value, System.DBNull.Value);
                a.Tables.Add(new System.Data.DataTable("table2", "urn:table2"));
                a.Tables[1].Locale = System.Globalization.CultureInfo.InvariantCulture;
                a.Tables[1].Columns.Add("col2_1", typeof(bool));
                a.Tables[1].Columns.Add("col2_2", typeof(decimal));
                a.Tables[1].Rows.Add(true, 1.0m);
                a.Tables[1].Rows.Add(false, 99.0m);
                int i = 1;
                this.CustomiseProcessDataSetWithMoreData(a, ref i);
                _testContext.BeginTimer("GeneratedAsmxSampleTest_ProcessDataSetWithMoreData");
                try
                {
                    return testAsmxServiceSoapClient.ProcessDataSetWithMoreData(a, i);
                }
                finally
                {
                    _testContext.EndTimer("GeneratedAsmxSampleTest_ProcessDataSetWithMoreData");
                }
            }
            finally
            {
                a.Dispose();
            }
        }
        
        private void ProcessCompoundDataSet()
        {
            GeneratedContractsAsmx.AsmxCompoundWithDataSet data = new GeneratedContractsAsmx.AsmxCompoundWithDataSet();
            try
            {
                data.Data = new System.Data.DataSet();
                data.Data.Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Data.Tables.Add(new System.Data.DataTable("table1", "urn:table1"));
                data.Data.Tables[0].Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Data.Tables[0].Columns.Add("col1_1", typeof(int));
                data.Data.Tables[0].Columns.Add("col1_2", typeof(string));
                data.Data.Tables[0].Rows.Add(1, "hello1");
                data.Data.Tables[0].Rows.Add(2, "hello2");
                data.Data.Tables[0].Rows.Add(System.DBNull.Value, System.DBNull.Value);
                data.Data.Tables.Add(new System.Data.DataTable("table2", "urn:table2"));
                data.Data.Tables[1].Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Data.Tables[1].Columns.Add("col2_1", typeof(bool));
                data.Data.Tables[1].Columns.Add("col2_2", typeof(decimal));
                data.Data.Tables[1].Rows.Add(true, 1.0m);
                data.Data.Tables[1].Rows.Add(false, 99.0m);
                this.CustomiseProcessCompoundDataSet(data);
                _testContext.BeginTimer("GeneratedAsmxSampleTest_ProcessCompoundDataSet");
                try
                {
                    testAsmxServiceSoapClient.ProcessCompoundDataSet(data);
                }
                finally
                {
                    _testContext.EndTimer("GeneratedAsmxSampleTest_ProcessCompoundDataSet");
                }
            }
            finally
            {
                data.Data.Dispose();
            }
        }
        
        private void ProcessTypedDataSet()
        {
            GeneratedContractsAsmx.AsmxTypedDataSet data = null;
            try
            {
                data = new GeneratedContractsAsmx.AsmxTypedDataSet();
                data.Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Tables[0].Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Tables[0].Rows.Add("hello1", 1, new System.DateTime(2010, 6, 29, 0, 0, 0, 0));
                data.Tables[0].Rows.Add("hello2", 2, new System.DateTime(2010, 5, 29, 0, 0, 0, 0));
                data.Tables[0].Rows.Add(System.DBNull.Value, System.DBNull.Value, System.DBNull.Value);
                this.CustomiseProcessTypedDataSet(data);
                _testContext.BeginTimer("GeneratedAsmxSampleTest_ProcessTypedDataSet");
                try
                {
                    testAsmxServiceSoapClient.ProcessTypedDataSet(data);
                }
                finally
                {
                    _testContext.EndTimer("GeneratedAsmxSampleTest_ProcessTypedDataSet");
                }
            }
            finally
            {
                data.Dispose();
            }
        }
        
        private void ProcessCompoundTypedDataSet()
        {
            GeneratedContractsAsmx.AsmxCompoundWithTypedDataSet data = new GeneratedContractsAsmx.AsmxCompoundWithTypedDataSet();
            try
            {
                data.Data = new GeneratedContractsAsmx.AsmxTypedDataSet();
                data.Data.Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Data.Tables[0].Locale = System.Globalization.CultureInfo.InvariantCulture;
                data.Data.Tables[0].Rows.Add("hello1", 1, new System.DateTime(2010, 6, 29, 0, 0, 0, 0));
                data.Data.Tables[0].Rows.Add("hello2", 2, new System.DateTime(2010, 5, 29, 0, 0, 0, 0));
                data.Data.Tables[0].Rows.Add(System.DBNull.Value, System.DBNull.Value, System.DBNull.Value);
                this.CustomiseProcessCompoundTypedDataSet(data);
                _testContext.BeginTimer("GeneratedAsmxSampleTest_ProcessCompoundTypedDataSet");
                try
                {
                    testAsmxServiceSoapClient.ProcessCompoundTypedDataSet(data);
                }
                finally
                {
                    _testContext.EndTimer("GeneratedAsmxSampleTest_ProcessCompoundTypedDataSet");
                }
            }
            finally
            {
                data.Data.Dispose();
            }
        }
    }
}
