//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedSampleTest
{
    using System.Collections.Generic;
    using System.IO;
    using System.ServiceModel;
    using Library.Test.Integration;
    using Microsoft.VisualStudio.TestTools.UnitTesting;


    public partial class GeneratedSampleTestTests
    {

        private static Dictionary<int, GeneratedContracts.IArithmetic> arithmeticProxyTable = new Dictionary<int, GeneratedContracts.IArithmetic>();

        private static Dictionary<int, GeneratedContracts.ICollections> collectionsProxyTable = new Dictionary<int, GeneratedContracts.ICollections>();

        private static Dictionary<int, Contracts.Custom.ICustomContracts> customContractsProxyTable = new Dictionary<int, Contracts.Custom.ICustomContracts>();

        private static Dictionary<int, Contracts.Custom.ICustomContracts2> customContracts2ProxyTable = new Dictionary<int, Contracts.Custom.ICustomContracts2>();

        private static Dictionary<int, GeneratedContracts.IBufferedStreamService> bufferedStreamServiceProxyTable = new Dictionary<int, GeneratedContracts.IBufferedStreamService>();

        private static Dictionary<int, GeneratedContracts.IStreamedStreamService> streamedStreamServiceProxyTable = new Dictionary<int, GeneratedContracts.IStreamedStreamService>();

        private static Dictionary<int, GeneratedContracts.IShapeService> shapeServiceProxyTable = new Dictionary<int, GeneratedContracts.IShapeService>();

        private static Dictionary<int, GeneratedContracts.IServiceKnownType> serviceKnownTypeProxyTable = new Dictionary<int, GeneratedContracts.IServiceKnownType>();

        private static Dictionary<int, GeneratedContracts.ISharePrices> sharePricesProxyTable = new Dictionary<int, GeneratedContracts.ISharePrices>();

        private static Dictionary<int, GeneratedContracts.IDataSets> dataSetsProxyTable = new Dictionary<int, GeneratedContracts.IDataSets>();

        [TestInitialize()]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope", Justification = "proxy should not be disposed")]
        public void InitializeTest()
        {
            System.Threading.Monitor.Enter(arithmeticProxyTable);
            try
            {
                arithmeticProxyTable.TryGetValue(System.Threading.Thread.CurrentThread.ManagedThreadId, out arithmeticClient);
                if (((arithmeticClient == null)
                            || (((System.ServiceModel.ICommunicationObject)(arithmeticClient)).State == System.ServiceModel.CommunicationState.Faulted)))
                {
                    // The following line may need to be customised to select the appropriate binding from the configuration file
                    arithmeticClient = new GeneratedContracts.ArithmeticClient();
                    ((System.ServiceModel.ICommunicationObject)(arithmeticClient)).Open();
                    arithmeticProxyTable[System.Threading.Thread.CurrentThread.ManagedThreadId] = arithmeticClient;
                }
            }
            finally
            {
                System.Threading.Monitor.Exit(arithmeticProxyTable);
            }
            System.Threading.Monitor.Enter(collectionsProxyTable);
            try
            {
                collectionsProxyTable.TryGetValue(System.Threading.Thread.CurrentThread.ManagedThreadId, out collectionsClient);
                if (((collectionsClient == null)
                            || (((System.ServiceModel.ICommunicationObject)(collectionsClient)).State == System.ServiceModel.CommunicationState.Faulted)))
                {
                    // The following line may need to be customised to select the appropriate binding from the configuration file
                    collectionsClient = new GeneratedContracts.CollectionsClient();
                    ((System.ServiceModel.ICommunicationObject)(collectionsClient)).Open();
                    collectionsProxyTable[System.Threading.Thread.CurrentThread.ManagedThreadId] = collectionsClient;
                }
            }
            finally
            {
                System.Threading.Monitor.Exit(collectionsProxyTable);
            }
            System.Threading.Monitor.Enter(customContractsProxyTable);
            try
            {
                customContractsProxyTable.TryGetValue(System.Threading.Thread.CurrentThread.ManagedThreadId, out customContractsClient);
                if (((customContractsClient == null)
                            || (((System.ServiceModel.ICommunicationObject)(customContractsClient)).State == System.ServiceModel.CommunicationState.Faulted)))
                {
                    // The following line may need to be customised to select the appropriate binding from the configuration file
                    customContractsClient = new ClientProxies.Custom.CustomContracts();
                    ((System.ServiceModel.ICommunicationObject)(customContractsClient)).Open();
                    customContractsProxyTable[System.Threading.Thread.CurrentThread.ManagedThreadId] = customContractsClient;
                }
            }
            finally
            {
                System.Threading.Monitor.Exit(customContractsProxyTable);
            }
            System.Threading.Monitor.Enter(customContracts2ProxyTable);
            try
            {
                customContracts2ProxyTable.TryGetValue(System.Threading.Thread.CurrentThread.ManagedThreadId, out customContracts2Client);
                if (((customContracts2Client == null)
                            || (((System.ServiceModel.ICommunicationObject)(customContracts2Client)).State == System.ServiceModel.CommunicationState.Faulted)))
                {
                    // The following line may need to be customised to select the appropriate binding from the configuration file
                    System.ServiceModel.ChannelFactory<Contracts.Custom.ICustomContracts2> customContracts2Factory = new System.ServiceModel.ChannelFactory<Contracts.Custom.ICustomContracts2>("Custom2");
                    customContracts2Client = customContracts2Factory.CreateChannel();
                    ((System.ServiceModel.ICommunicationObject)(customContracts2Client)).Open();
                    customContracts2ProxyTable[System.Threading.Thread.CurrentThread.ManagedThreadId] = customContracts2Client;
                }
            }
            finally
            {
                System.Threading.Monitor.Exit(customContracts2ProxyTable);
            }
            System.Threading.Monitor.Enter(bufferedStreamServiceProxyTable);
            try
            {
                bufferedStreamServiceProxyTable.TryGetValue(System.Threading.Thread.CurrentThread.ManagedThreadId, out bufferedStreamServiceClient);
                if (((bufferedStreamServiceClient == null)
                            || (((System.ServiceModel.ICommunicationObject)(bufferedStreamServiceClient)).State == System.ServiceModel.CommunicationState.Faulted)))
                {
                    // The following line may need to be customised to select the appropriate binding from the configuration file
                    bufferedStreamServiceClient = new GeneratedContracts.BufferedStreamServiceClient();
                    ((System.ServiceModel.ICommunicationObject)(bufferedStreamServiceClient)).Open();
                    bufferedStreamServiceProxyTable[System.Threading.Thread.CurrentThread.ManagedThreadId] = bufferedStreamServiceClient;
                }
            }
            finally
            {
                System.Threading.Monitor.Exit(bufferedStreamServiceProxyTable);
            }
            System.Threading.Monitor.Enter(streamedStreamServiceProxyTable);
            try
            {
                streamedStreamServiceProxyTable.TryGetValue(System.Threading.Thread.CurrentThread.ManagedThreadId, out streamedStreamServiceClient);
                if (((streamedStreamServiceClient == null)
                            || (((System.ServiceModel.ICommunicationObject)(streamedStreamServiceClient)).State == System.ServiceModel.CommunicationState.Faulted)))
                {
                    // The following line may need to be customised to select the appropriate binding from the configuration file
                    streamedStreamServiceClient = new GeneratedContracts.StreamedStreamServiceClient();
                    ((System.ServiceModel.ICommunicationObject)(streamedStreamServiceClient)).Open();
                    streamedStreamServiceProxyTable[System.Threading.Thread.CurrentThread.ManagedThreadId] = streamedStreamServiceClient;
                }
            }
            finally
            {
                System.Threading.Monitor.Exit(streamedStreamServiceProxyTable);
            }
            System.Threading.Monitor.Enter(shapeServiceProxyTable);
            try
            {
                shapeServiceProxyTable.TryGetValue(System.Threading.Thread.CurrentThread.ManagedThreadId, out shapeServiceClient);
                if (((shapeServiceClient == null)
                            || (((System.ServiceModel.ICommunicationObject)(shapeServiceClient)).State == System.ServiceModel.CommunicationState.Faulted)))
                {
                    // The following line may need to be customised to select the appropriate binding from the configuration file
                    shapeServiceClient = new GeneratedContracts.ShapeServiceClient();
                    ((System.ServiceModel.ICommunicationObject)(shapeServiceClient)).Open();
                    shapeServiceProxyTable[System.Threading.Thread.CurrentThread.ManagedThreadId] = shapeServiceClient;
                }
            }
            finally
            {
                System.Threading.Monitor.Exit(shapeServiceProxyTable);
            }
            System.Threading.Monitor.Enter(serviceKnownTypeProxyTable);
            try
            {
                serviceKnownTypeProxyTable.TryGetValue(System.Threading.Thread.CurrentThread.ManagedThreadId, out serviceKnownTypeClient);
                if (((serviceKnownTypeClient == null)
                            || (((System.ServiceModel.ICommunicationObject)(serviceKnownTypeClient)).State == System.ServiceModel.CommunicationState.Faulted)))
                {
                    // The following line may need to be customised to select the appropriate binding from the configuration file
                    serviceKnownTypeClient = new GeneratedContracts.ServiceKnownTypeClient("GeneratedServiceKnownType");
                    ((System.ServiceModel.ICommunicationObject)(serviceKnownTypeClient)).Open();
                    serviceKnownTypeProxyTable[System.Threading.Thread.CurrentThread.ManagedThreadId] = serviceKnownTypeClient;
                }
            }
            finally
            {
                System.Threading.Monitor.Exit(serviceKnownTypeProxyTable);
            }
            System.Threading.Monitor.Enter(sharePricesProxyTable);
            try
            {
                sharePricesProxyTable.TryGetValue(System.Threading.Thread.CurrentThread.ManagedThreadId, out sharePricesClient);
                if (((sharePricesClient == null)
                            || (((System.ServiceModel.ICommunicationObject)(sharePricesClient)).State == System.ServiceModel.CommunicationState.Faulted)))
                {
                    // The following line may need to be customised to select the appropriate binding from the configuration file
                    sharePricesClient = new GeneratedContracts.SharePricesClient(new InstanceContext(new SharePricesCallback()), "GeneratedSharePrices");
                    ((System.ServiceModel.ICommunicationObject)(sharePricesClient)).Open();
                    sharePricesProxyTable[System.Threading.Thread.CurrentThread.ManagedThreadId] = sharePricesClient;
                }
            }
            finally
            {
                System.Threading.Monitor.Exit(sharePricesProxyTable);
            }
            System.Threading.Monitor.Enter(dataSetsProxyTable);
            try
            {
                dataSetsProxyTable.TryGetValue(System.Threading.Thread.CurrentThread.ManagedThreadId, out dataSetsClient);
                if (((dataSetsClient == null)
                            || (((System.ServiceModel.ICommunicationObject)(dataSetsClient)).State == System.ServiceModel.CommunicationState.Faulted)))
                {
                    // The following line may need to be customised to select the appropriate binding from the configuration file
                    dataSetsClient = new GeneratedContracts.DataSetsClient();
                    ((System.ServiceModel.ICommunicationObject)(dataSetsClient)).Open();
                    dataSetsProxyTable[System.Threading.Thread.CurrentThread.ManagedThreadId] = dataSetsClient;
                }
            }
            finally
            {
                System.Threading.Monitor.Exit(dataSetsProxyTable);
            }
        }

        private void CustomiseAdd(GeneratedContracts.AddRequest request)
        {
        }

        private void CustomiseAdd2(GeneratedContracts.AddRequest request)
        {
        }

        private void CustomiseAdd3(ref int a, ref int b)
        {
        }

        private void CustomiseWrappedAdd(GeneratedContracts.AddRequestWrappedMessage request)
        {
        }

        private void CustomiseWrappednoCustomNamesAdd(GeneratedContracts.AddRequestWrappedMessageNoCustomNames request)
        {
        }

        private void CustomiseWrappedMessageWithHeaderAndBodyNamespaceOverrides(GeneratedContracts.AddRequestWrappedMessageWithHeaderAndBodyNamespaceOverrides request)
        {
        }

        private void CustomiseUnwrappedAdd(GeneratedContracts.AddRequestUnwrappedMessage request)
        {
        }

        private void CustomiseRefParameter(ref int a)
        {
        }

        private void CustomiseRefObjectParameter(object a, object b)
        {
        }

        private void CustomiseMixedDirectionParameters(ref int a, ref int b)
        {
        }

        private void CustomiseOneWayOperation(ref int a)
        {
        }

        private void CustomiseProcessCollection(GeneratedContracts.CollectionsData data)
        {
        }

        private void CustomiseProcessCollection2(GeneratedContracts.CollectionsData data)
        {
        }

        private void CustomiseOverload(ref int a)
        {
        }

        private void CustomiseOverload2(ref string a)
        {
        }

        private void CustomiseHidden(ref string a)
        {
        }

        private void CustomiseBufferedStreamOperation(out System.IO.Stream input)
        {
            input = new MemoryStream();
        }

        private void CustomiseBufferedMemoryStreamOperation(out System.IO.MemoryStream input)
        {
            input = new MemoryStream();
        }

        private void CustomiseStreamedStreamOperation(out System.IO.Stream input)
        {
            input = new MemoryStream();
        }

        private void CustomiseStreamedMemoryStreamOperation(out System.IO.MemoryStream input)
        {
            input = new MemoryStream();
        }

        private void CustomiseStreamedWithNonStreamParametersOperation(ref string s, ref int i)
        {
            s = "hello";
            i = 99;
        }

        private void CustomiseBufferedUnwrappedMessageWithMemoryStream(GeneratedContracts.BufferedUnwrappedMessageWithMemoryStream request)
        {
            request.Body2 = new MemoryStream();
        }

        private void CustomiseBufferedUnwrappedMessageWithStream(GeneratedContracts.BufferedUnwrappedMessageWithStream request)
        {
            request.Body1 = new MemoryStream();
        }

        private void CustomiseBufferedWrappedMessageWithMemoryStream(GeneratedContracts.BufferedWrappedMessageWithMemoryStream request)
        {
            request.Body4 = new MemoryStream();
        }

        private void CustomiseBufferedWrappedMessageWithStream(GeneratedContracts.BufferedWrappedMessageWithStream request)
        {
            request.Body3 = new byte[1];
        }

        private void CustomiseStreamedUnwrappedMessageWithMemoryStream(GeneratedContracts.StreamedUnwrappedMessageWithMemoryStream request)
        {
            request.Body2 = new MemoryStream();
        }

        private void CustomiseStreamedUnwrappedMessageWithStream(GeneratedContracts.StreamedUnwrappedMessageWithStream request)
        {
            request.Body1 = new MemoryStream();
        }

        private void CustomiseStreamedWrappedMessageWithMemoryStream(GeneratedContracts.StreamedWrappedMessageWithMemoryStream request)
        {
            request.Body4 = new MemoryStream();
        }

        private void CustomiseStreamedWrappedMessageWithStream(GeneratedContracts.StreamedWrappedMessageWithStream request)
        {
            request.Body3 = new byte[1];
        }

        private void CustomiseDoSomething(GeneratedContracts.Shape parameter)
        {
        }

        private void CustomiseDoSomething2(GeneratedContracts.BaseServiceKnownType arg)
        {
        }

        private void CustomiseRegisterForNotificationOneWay(ref string symbol)
        {
        }

        private void CustomiseRegisterForNotificationTwoWay(ref string symbol)
        {
        }

        private void CustomiseProcessDataSet(GeneratedContracts.ProcessDataSetRequest request)
        {
        }

        private void CustomiseProcessDataSetWithMoreData(GeneratedContracts.ProcessDataSetWithMoreDataRequest request)
        {
        }

        private void CustomiseProcessCompoundDataSet(GeneratedContracts.ProcessCompoundDataSetRequest request)
        {
        }

        private void CustomiseProcessTypedDataSet(GeneratedContracts.ProcessTypedDataSetRequest request)
        {
        }

        private void CustomiseProcessCompoundTypedDataSet(GeneratedContracts.ProcessCompoundTypedDataSetRequest request)
        {
        }
    }
}
