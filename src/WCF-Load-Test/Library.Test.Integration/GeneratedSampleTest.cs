//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18046
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedSampleTest
{
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using System.Collections.Generic;
    
    
    [TestClass()]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1001:TypesThatOwnDisposableFieldsShouldBeDisposable", Justification="proxy should not be disposed")]
    public partial class GeneratedSampleTestTests
    {
        
        private TestContext _testContext;
        
        private GeneratedContracts.IArithmetic arithmeticClient;
        
        private GeneratedContracts.ICollections collectionsClient;
        
        private Contracts.Custom.ICustomContracts customContractsClient;
        
        private Contracts.Custom.ICustomContracts2 customContracts2Client;
        
        private GeneratedContracts.IBufferedStreamService bufferedStreamServiceClient;
        
        private GeneratedContracts.IStreamedStreamService streamedStreamServiceClient;
        
        private GeneratedContracts.IShapeService shapeServiceClient;
        
        private GeneratedContracts.IServiceKnownType serviceKnownTypeClient;
        
        private GeneratedContracts.ISharePrices sharePricesClient;
        
        private GeneratedContracts.IDataSets dataSetsClient;
        
        public TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [TestMethod()]
        public void GeneratedSampleTest()
        {
            // 01/07/2010 08:30:32
            this.Add();
            // 01/07/2010 08:30:33
            this.Add2();
            // 01/07/2010 08:30:33
            this.Add3();
            // 01/07/2010 08:30:33
            this.WrappedAdd();
            // 01/07/2010 08:30:33
            this.WrappednoCustomNamesAdd();
            // 01/07/2010 08:30:33
            this.WrappedMessageWithHeaderAndBodyNamespaceOverrides();
            // 01/07/2010 08:30:33
            this.UnwrappedAdd();
            // 01/07/2010 08:30:33
            this.NoParameters();
            // 01/07/2010 08:30:33
            this.RefParameter();
            // 01/07/2010 08:30:33
            this.RefObjectParameter();
            // 01/07/2010 08:30:33
            this.OutParameter();
            // 01/07/2010 08:30:33
            this.MixedDirectionParameters();
            // 01/07/2010 08:30:33
            this.OneWayOperation();
            // 01/07/2010 08:30:33
            this.ProcessCollection();
            // 01/07/2010 08:30:33
            this.ProcessCollection2();
            // 01/07/2010 08:30:33
            this.Overload();
            // 01/07/2010 08:30:33
            this.Overload2();
            // 01/07/2010 08:30:33
            this.Hidden();
            // 01/07/2010 08:30:33
            this.Contract2Method();
            // 01/07/2010 08:30:33
            this.BufferedStreamOperation();
            // 01/07/2010 08:30:33
            this.BufferedMemoryStreamOperation();
            // 01/07/2010 08:30:33
            this.StreamedStreamOperation();
            // 01/07/2010 08:30:33
            this.StreamedMemoryStreamOperation();
            // 01/07/2010 08:30:33
            this.StreamedWithNonStreamParametersOperation();
            // 01/07/2010 08:30:33
            this.BufferedUnwrappedMessageWithMemoryStream();
            // 01/07/2010 08:30:33
            this.BufferedUnwrappedMessageWithStream();
            // 01/07/2010 08:30:33
            this.BufferedWrappedMessageWithMemoryStream();
            // 01/07/2010 08:30:33
            this.BufferedWrappedMessageWithStream();
            // 01/07/2010 08:30:33
            this.StreamedUnwrappedMessageWithMemoryStream();
            // 01/07/2010 08:30:33
            this.StreamedUnwrappedMessageWithStream();
            // 01/07/2010 08:30:33
            this.StreamedWrappedMessageWithMemoryStream();
            // 01/07/2010 08:30:33
            this.StreamedWrappedMessageWithStream();
            // 01/07/2010 08:30:33
            this.DoSomething();
            // 01/07/2010 08:30:33
            this.DoSomething2();
            // 01/07/2010 08:30:37
            this.RegisterForNotificationOneWay();
            // 01/07/2010 08:30:38
            this.RegisterForNotificationTwoWay();
            // 01/07/2010 08:30:38
            this.ProcessDataSet();
            // 01/07/2010 08:30:38
            this.ProcessDataSetWithMoreData();
            // 01/07/2010 08:30:38
            this.ProcessCompoundDataSet();
            // 01/07/2010 08:30:38
            this.ProcessTypedDataSet();
            // 01/07/2010 08:30:38
            this.ProcessCompoundTypedDataSet();
        }
        
        private GeneratedContracts.Response Add()
        {
            GeneratedContracts.AddRequest request = new GeneratedContracts.AddRequest();
            request.A = 10;
            request.B = 5;
            this.CustomiseAdd(request);
            _testContext.BeginTimer("GeneratedSampleTest_Add");
            try
            {
                return arithmeticClient.Add(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_Add");
            }
        }
        
        private int Add2()
        {
            GeneratedContracts.AddRequest request = new GeneratedContracts.AddRequest();
            request.A = 10;
            request.B = 5;
            this.CustomiseAdd2(request);
            _testContext.BeginTimer("GeneratedSampleTest_Add2");
            try
            {
                return arithmeticClient.Add2(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_Add2");
            }
        }
        
        private int Add3()
        {
            int a = 20;
            int b = 25;
            this.CustomiseAdd3(ref a, ref b);
            _testContext.BeginTimer("GeneratedSampleTest_Add3");
            try
            {
                return arithmeticClient.Add3(a, b);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_Add3");
            }
        }
        
        private GeneratedContracts.WrappedAddResponse WrappedAdd()
        {
            GeneratedContracts.AddRequestWrappedMessage request = new GeneratedContracts.AddRequestWrappedMessage();
            request.header = new GeneratedContracts.TestHeader();
            request.header.Header = "hello";
            request.A = 11;
            request.B = 6;
            this.CustomiseWrappedAdd(request);
            _testContext.BeginTimer("GeneratedSampleTest_WrappedAdd");
            try
            {
                return arithmeticClient.WrappedAdd(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_WrappedAdd");
            }
        }
        
        private GeneratedContracts.WrappednoCustomNamesAddResponse WrappednoCustomNamesAdd()
        {
            GeneratedContracts.AddRequestWrappedMessageNoCustomNames request = new GeneratedContracts.AddRequestWrappedMessageNoCustomNames();
            request.header = new GeneratedContracts.TestHeader();
            request.header.Header = "hello";
            request.A = 11;
            request.B = 6;
            this.CustomiseWrappednoCustomNamesAdd(request);
            _testContext.BeginTimer("GeneratedSampleTest_WrappednoCustomNamesAdd");
            try
            {
                return arithmeticClient.WrappednoCustomNamesAdd(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_WrappednoCustomNamesAdd");
            }
        }
        
        private GeneratedContracts.WrappedMessageWithHeaderAndBodyNamespaceOverridesResponse WrappedMessageWithHeaderAndBodyNamespaceOverrides()
        {
            GeneratedContracts.AddRequestWrappedMessageWithHeaderAndBodyNamespaceOverrides request = new GeneratedContracts.AddRequestWrappedMessageWithHeaderAndBodyNamespaceOverrides();
            request.header = new GeneratedContracts.TestHeader();
            request.header.Header = "hello";
            request.A = 11;
            request.B = 6;
            this.CustomiseWrappedMessageWithHeaderAndBodyNamespaceOverrides(request);
            _testContext.BeginTimer("GeneratedSampleTest_WrappedMessageWithHeaderAndBodyNamespaceOverrides");
            try
            {
                return arithmeticClient.WrappedMessageWithHeaderAndBodyNamespaceOverrides(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_WrappedMessageWithHeaderAndBodyNamespaceOverrides");
            }
        }
        
        private GeneratedContracts.UnwrappedAddResponse UnwrappedAdd()
        {
            GeneratedContracts.AddRequestUnwrappedMessage request = new GeneratedContracts.AddRequestUnwrappedMessage();
            request.header = new GeneratedContracts.TestHeader();
            request.header.Header = "hello";
            request.A = 11;
            request.B = 6;
            this.CustomiseUnwrappedAdd(request);
            _testContext.BeginTimer("GeneratedSampleTest_UnwrappedAdd");
            try
            {
                return arithmeticClient.UnwrappedAdd(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_UnwrappedAdd");
            }
        }
        
        private void NoParameters()
        {
            _testContext.BeginTimer("GeneratedSampleTest_NoParameters");
            try
            {
                arithmeticClient.NoParameters();
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_NoParameters");
            }
        }
        
        private void RefParameter()
        {
            int a = 0;
            this.CustomiseRefParameter(ref a);
            _testContext.BeginTimer("GeneratedSampleTest_RefParameter");
            try
            {
                arithmeticClient.RefParameter(ref a);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_RefParameter");
            }
        }
        
        private void RefObjectParameter()
        {
            string a = "hello";
            object b = null;
            this.CustomiseRefObjectParameter(a, b);
            _testContext.BeginTimer("GeneratedSampleTest_RefObjectParameter");
            try
            {
                arithmeticClient.RefObjectParameter(a, ref b);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_RefObjectParameter");
            }
        }
        
        private int OutParameter()
        {
            int b;
            _testContext.BeginTimer("GeneratedSampleTest_OutParameter");
            try
            {
                return arithmeticClient.OutParameter(out b);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_OutParameter");
            }
        }
        
        private void MixedDirectionParameters()
        {
            int a = 1;
            int b = 23;
            int c;
            this.CustomiseMixedDirectionParameters(ref a, ref b);
            _testContext.BeginTimer("GeneratedSampleTest_MixedDirectionParameters");
            try
            {
                arithmeticClient.MixedDirectionParameters(a, ref b, out c);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_MixedDirectionParameters");
            }
        }
        
        private void OneWayOperation()
        {
            int a = 5;
            this.CustomiseOneWayOperation(ref a);
            _testContext.BeginTimer("GeneratedSampleTest_OneWayOperation");
            try
            {
                arithmeticClient.OneWayOperation(a);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_OneWayOperation");
            }
        }
        
        private GeneratedContracts.CollectionsData ProcessCollection()
        {
            GeneratedContracts.CollectionsData data = new GeneratedContracts.CollectionsData();
            data.ArrayList = new object[3];
            int temp0 = 1;
            data.ArrayList[0] = temp0;
            int temp1 = 2;
            data.ArrayList[1] = temp1;
            int temp2 = 3;
            data.ArrayList[2] = temp2;
            data.Element = null;
            data.Hashtable = new System.Collections.Generic.Dictionary<object, object>();
            data.Hashtable.Add(1, "one");
            data.Hashtable.Add(2, "two");
            data.IntIList = new int[3];
            data.IntIList[0] = 7;
            data.IntIList[1] = 8;
            data.IntIList[2] = 9;
            data.IntList = null;
            data.Nodes = null;
            data.NonGenericEnumerableOnlyCollection = new object[2];
            int temp3 = 0;
            data.NonGenericEnumerableOnlyCollection[0] = temp3;
            string temp4 = "hello";
            data.NonGenericEnumerableOnlyCollection[1] = temp4;
            data.RequestCollection = new GeneratedContracts.AddRequest[2];
            data.RequestCollection[0] = new GeneratedContracts.AddRequest();
            data.RequestCollection[0].A = 1;
            data.RequestCollection[0].B = 2;
            data.RequestCollection[1] = new GeneratedContracts.AddRequest();
            data.RequestCollection[1].A = 3;
            data.RequestCollection[1].B = 4;
            data.RequestDictionary = new System.Collections.Generic.Dictionary<string, GeneratedContracts.AddRequest>();
            GeneratedContracts.AddRequest temp5 = new GeneratedContracts.AddRequest();
            temp5.A = 1;
            temp5.B = 2;
            data.RequestDictionary.Add("Key1", temp5);
            GeneratedContracts.AddRequest temp6 = new GeneratedContracts.AddRequest();
            temp6.A = 3;
            temp6.B = 4;
            data.RequestDictionary.Add("Key2", temp6);
            data.RequestICollection = new GeneratedContracts.AddRequest[2];
            data.RequestICollection[0] = new GeneratedContracts.AddRequest();
            data.RequestICollection[0].A = 1;
            data.RequestICollection[0].B = 2;
            data.RequestICollection[1] = new GeneratedContracts.AddRequest();
            data.RequestICollection[1].A = 3;
            data.RequestICollection[1].B = 4;
            data.RequestIDictionary = new System.Collections.Generic.Dictionary<string, GeneratedContracts.AddRequest>();
            GeneratedContracts.AddRequest temp7 = new GeneratedContracts.AddRequest();
            temp7.A = 1;
            temp7.B = 2;
            data.RequestIDictionary.Add("Key1", temp7);
            GeneratedContracts.AddRequest temp8 = new GeneratedContracts.AddRequest();
            temp8.A = 3;
            temp8.B = 4;
            data.RequestIDictionary.Add("Key2", temp8);
            data.RequestIList = new GeneratedContracts.AddRequest[2];
            data.RequestIList[0] = new GeneratedContracts.AddRequest();
            data.RequestIList[0].A = 1;
            data.RequestIList[0].B = 2;
            data.RequestIList[1] = new GeneratedContracts.AddRequest();
            data.RequestIList[1].A = 3;
            data.RequestIList[1].B = 4;
            data.RequestList = new GeneratedContracts.AddRequest[2];
            data.RequestList[0] = new GeneratedContracts.AddRequest();
            data.RequestList[0].A = 1;
            data.RequestList[0].B = 2;
            data.RequestList[1] = new GeneratedContracts.AddRequest();
            data.RequestList[1].A = 3;
            data.RequestList[1].B = 4;
            data.SqlData = null;
            this.CustomiseProcessCollection(data);
            _testContext.BeginTimer("GeneratedSampleTest_ProcessCollection");
            try
            {
                return collectionsClient.ProcessCollection(data);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_ProcessCollection");
            }
        }
        
        private GeneratedContracts.CollectionsData ProcessCollection2()
        {
            GeneratedContracts.CollectionsData data = new GeneratedContracts.CollectionsData();
            data.ArrayList = null;
            System.Xml.XmlDocument temp0 = new System.Xml.XmlDocument();
            temp0.LoadXml("<test xmlns=\"\">Element</test>");
            data.Element = temp0.DocumentElement;
            data.Hashtable = null;
            data.IntIList = null;
            data.IntList = null;
            data.Nodes = new System.Xml.XmlNode[2];
            System.Xml.XmlDocument temp1 = new System.Xml.XmlDocument();
            temp1.LoadXml("<test xmlns=\"\"><node>one</node></test>");
            data.Nodes[0] = temp1.DocumentElement;
            System.Xml.XmlDocument temp2 = new System.Xml.XmlDocument();
            temp2.LoadXml("<test xmlns=\"\"><node>two</node></test>");
            data.Nodes[1] = temp2.DocumentElement;
            data.NonGenericEnumerableOnlyCollection = null;
            data.RequestCollection = null;
            data.RequestDictionary = null;
            data.RequestICollection = null;
            data.RequestIDictionary = null;
            data.RequestIList = null;
            data.RequestList = null;
            data.SqlData = null;
            this.CustomiseProcessCollection2(data);
            _testContext.BeginTimer("GeneratedSampleTest_ProcessCollection");
            try
            {
                return collectionsClient.ProcessCollection(data);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_ProcessCollection");
            }
        }
        
        private void Overload()
        {
            int a = 23;
            this.CustomiseOverload(ref a);
            _testContext.BeginTimer("GeneratedSampleTest_Overload");
            try
            {
                customContractsClient.Overload(a);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_Overload");
            }
        }
        
        private void Overload2()
        {
            string a = "abc";
            this.CustomiseOverload2(ref a);
            _testContext.BeginTimer("GeneratedSampleTest_Overload");
            try
            {
                customContractsClient.Overload(a);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_Overload");
            }
        }
        
        private void Hidden()
        {
            string a = "def";
            this.CustomiseHidden(ref a);
            _testContext.BeginTimer("GeneratedSampleTest_Hidden");
            try
            {
                customContractsClient.Hidden(a);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_Hidden");
            }
        }
        
        private void Contract2Method()
        {
            _testContext.BeginTimer("GeneratedSampleTest_Contract2Method");
            try
            {
                customContracts2Client.Contract2Method();
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_Contract2Method");
            }
        }
        
        private System.IO.Stream BufferedStreamOperation()
        {
            System.IO.Stream input = null;
            this.CustomiseBufferedStreamOperation(out input);
            _testContext.BeginTimer("GeneratedSampleTest_BufferedStreamOperation");
            try
            {
                return bufferedStreamServiceClient.BufferedStreamOperation(input);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_BufferedStreamOperation");
            }
        }
        
        private System.IO.MemoryStream BufferedMemoryStreamOperation()
        {
            System.IO.MemoryStream input = null;
            this.CustomiseBufferedMemoryStreamOperation(out input);
            _testContext.BeginTimer("GeneratedSampleTest_BufferedMemoryStreamOperation");
            try
            {
                return bufferedStreamServiceClient.BufferedMemoryStreamOperation(input);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_BufferedMemoryStreamOperation");
            }
        }
        
        private System.IO.Stream StreamedStreamOperation()
        {
            System.IO.Stream input = null;
            this.CustomiseStreamedStreamOperation(out input);
            _testContext.BeginTimer("GeneratedSampleTest_StreamedStreamOperation");
            try
            {
                return streamedStreamServiceClient.StreamedStreamOperation(input);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_StreamedStreamOperation");
            }
        }
        
        private System.IO.MemoryStream StreamedMemoryStreamOperation()
        {
            System.IO.MemoryStream input = null;
            this.CustomiseStreamedMemoryStreamOperation(out input);
            _testContext.BeginTimer("GeneratedSampleTest_StreamedMemoryStreamOperation");
            try
            {
                return streamedStreamServiceClient.StreamedMemoryStreamOperation(input);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_StreamedMemoryStreamOperation");
            }
        }
        
        private void StreamedWithNonStreamParametersOperation()
        {
            string s = "hello";
            int i = 1;
            this.CustomiseStreamedWithNonStreamParametersOperation(ref s, ref i);
            _testContext.BeginTimer("GeneratedSampleTest_StreamedWithNonStreamParametersOperation");
            try
            {
                streamedStreamServiceClient.StreamedWithNonStreamParametersOperation(s, i);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_StreamedWithNonStreamParametersOperation");
            }
        }
        
        private GeneratedContracts.BufferedUnwrappedMessageWithMemoryStreamResponse BufferedUnwrappedMessageWithMemoryStream()
        {
            GeneratedContracts.BufferedUnwrappedMessageWithMemoryStream request = new GeneratedContracts.BufferedUnwrappedMessageWithMemoryStream();
            request.Header = 1;
            request.Body2 = new System.IO.MemoryStream();
            this.CustomiseBufferedUnwrappedMessageWithMemoryStream(request);
            _testContext.BeginTimer("GeneratedSampleTest_BufferedUnwrappedMessageWithMemoryStream");
            try
            {
                return bufferedStreamServiceClient.BufferedUnwrappedMessageWithMemoryStream(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_BufferedUnwrappedMessageWithMemoryStream");
            }
        }
        
        private GeneratedContracts.BufferedUnwrappedMessageWithStreamResponse BufferedUnwrappedMessageWithStream()
        {
            GeneratedContracts.BufferedUnwrappedMessageWithStream request = new GeneratedContracts.BufferedUnwrappedMessageWithStream();
            request.Header = 1;
            request.Body1 = null;
            this.CustomiseBufferedUnwrappedMessageWithStream(request);
            _testContext.BeginTimer("GeneratedSampleTest_BufferedUnwrappedMessageWithStream");
            try
            {
                return bufferedStreamServiceClient.BufferedUnwrappedMessageWithStream(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_BufferedUnwrappedMessageWithStream");
            }
        }
        
        private GeneratedContracts.BufferedWrappedMessageWithMemoryStreamResponse BufferedWrappedMessageWithMemoryStream()
        {
            GeneratedContracts.BufferedWrappedMessageWithMemoryStream request = new GeneratedContracts.BufferedWrappedMessageWithMemoryStream();
            request.Header = 1;
            request.Body4 = new System.IO.MemoryStream();
            this.CustomiseBufferedWrappedMessageWithMemoryStream(request);
            _testContext.BeginTimer("GeneratedSampleTest_BufferedWrappedMessageWithMemoryStream");
            try
            {
                return bufferedStreamServiceClient.BufferedWrappedMessageWithMemoryStream(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_BufferedWrappedMessageWithMemoryStream");
            }
        }
        
        private GeneratedContracts.BufferedWrappedMessageWithStreamResponse BufferedWrappedMessageWithStream()
        {
            GeneratedContracts.BufferedWrappedMessageWithStream request = new GeneratedContracts.BufferedWrappedMessageWithStream();
            request.Header = 1;
            request.Body3 = new byte[0];
            this.CustomiseBufferedWrappedMessageWithStream(request);
            _testContext.BeginTimer("GeneratedSampleTest_BufferedWrappedMessageWithStream");
            try
            {
                return bufferedStreamServiceClient.BufferedWrappedMessageWithStream(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_BufferedWrappedMessageWithStream");
            }
        }
        
        private GeneratedContracts.StreamedUnwrappedMessageWithMemoryStreamResponse StreamedUnwrappedMessageWithMemoryStream()
        {
            GeneratedContracts.StreamedUnwrappedMessageWithMemoryStream request = new GeneratedContracts.StreamedUnwrappedMessageWithMemoryStream();
            request.Header = 1;
            request.Body2 = new System.IO.MemoryStream();
            this.CustomiseStreamedUnwrappedMessageWithMemoryStream(request);
            _testContext.BeginTimer("GeneratedSampleTest_StreamedUnwrappedMessageWithMemoryStream");
            try
            {
                return streamedStreamServiceClient.StreamedUnwrappedMessageWithMemoryStream(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_StreamedUnwrappedMessageWithMemoryStream");
            }
        }
        
        private GeneratedContracts.StreamedUnwrappedMessageWithStreamResponse StreamedUnwrappedMessageWithStream()
        {
            GeneratedContracts.StreamedUnwrappedMessageWithStream request = new GeneratedContracts.StreamedUnwrappedMessageWithStream();
            request.Header = 1;
            request.Body1 = null;
            this.CustomiseStreamedUnwrappedMessageWithStream(request);
            _testContext.BeginTimer("GeneratedSampleTest_StreamedUnwrappedMessageWithStream");
            try
            {
                return streamedStreamServiceClient.StreamedUnwrappedMessageWithStream(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_StreamedUnwrappedMessageWithStream");
            }
        }
        
        private GeneratedContracts.StreamedWrappedMessageWithMemoryStreamResponse StreamedWrappedMessageWithMemoryStream()
        {
            GeneratedContracts.StreamedWrappedMessageWithMemoryStream request = new GeneratedContracts.StreamedWrappedMessageWithMemoryStream();
            request.Header = 1;
            request.Body4 = new System.IO.MemoryStream();
            this.CustomiseStreamedWrappedMessageWithMemoryStream(request);
            _testContext.BeginTimer("GeneratedSampleTest_StreamedWrappedMessageWithMemoryStream");
            try
            {
                return streamedStreamServiceClient.StreamedWrappedMessageWithMemoryStream(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_StreamedWrappedMessageWithMemoryStream");
            }
        }
        
        private GeneratedContracts.StreamedWrappedMessageWithStreamResponse StreamedWrappedMessageWithStream()
        {
            GeneratedContracts.StreamedWrappedMessageWithStream request = new GeneratedContracts.StreamedWrappedMessageWithStream();
            request.Header = 1;
            request.Body3 = new byte[0];
            this.CustomiseStreamedWrappedMessageWithStream(request);
            _testContext.BeginTimer("GeneratedSampleTest_StreamedWrappedMessageWithStream");
            try
            {
                return streamedStreamServiceClient.StreamedWrappedMessageWithStream(request);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_StreamedWrappedMessageWithStream");
            }
        }
        
        private GeneratedContracts.Shape DoSomething()
        {
            GeneratedContracts.Circle parameter = new GeneratedContracts.Circle();
            parameter.Radius = 0;
            parameter.Colour = 0;
            this.CustomiseDoSomething(parameter);
            _testContext.BeginTimer("GeneratedSampleTest_DoSomething");
            try
            {
                return shapeServiceClient.DoSomething(parameter);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_DoSomething");
            }
        }
        
        private void DoSomething2()
        {
            GeneratedContracts.DerivedServiceKnownType arg = new GeneratedContracts.DerivedServiceKnownType();
            arg.DerivedProperty = "abc";
            arg.BaseProperty = 1;
            this.CustomiseDoSomething2(arg);
            _testContext.BeginTimer("GeneratedSampleTest_DoSomething");
            try
            {
                serviceKnownTypeClient.DoSomething(arg);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_DoSomething");
            }
        }
        
        private void RegisterForNotificationOneWay()
        {
            string symbol = "MSFT";
            this.CustomiseRegisterForNotificationOneWay(ref symbol);
            _testContext.BeginTimer("GeneratedSampleTest_RegisterForNotificationOneWay");
            try
            {
                sharePricesClient.RegisterForNotificationOneWay(symbol);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_RegisterForNotificationOneWay");
            }
        }
        
        private void RegisterForNotificationTwoWay()
        {
            string symbol = "MSFT";
            this.CustomiseRegisterForNotificationTwoWay(ref symbol);
            _testContext.BeginTimer("GeneratedSampleTest_RegisterForNotificationTwoWay");
            try
            {
                sharePricesClient.RegisterForNotificationTwoWay(symbol);
            }
            finally
            {
                _testContext.EndTimer("GeneratedSampleTest_RegisterForNotificationTwoWay");
            }
        }
        
        private GeneratedContracts.ProcessDataSetResponse ProcessDataSet()
        {
            GeneratedContracts.ProcessDataSetRequest request = new GeneratedContracts.ProcessDataSetRequest();
            try
            {
                request.data = new System.Data.DataSet();
                request.data.Locale = System.Globalization.CultureInfo.InvariantCulture;
                request.data.Tables.Add(new System.Data.DataTable("table1", "urn:table1"));
                request.data.Tables[0].Locale = System.Globalization.CultureInfo.InvariantCulture;
                request.data.Tables[0].Columns.Add("col1_1", typeof(int));
                request.data.Tables[0].Columns.Add("col1_2", typeof(string));
                request.data.Tables[0].Rows.Add(1, "hello1");
                request.data.Tables[0].Rows.Add(2, "hello2");
                request.data.Tables[0].Rows.Add(System.DBNull.Value, System.DBNull.Value);
                request.data.Tables.Add(new System.Data.DataTable("table2", "urn:table2"));
                request.data.Tables[1].Locale = System.Globalization.CultureInfo.InvariantCulture;
                request.data.Tables[1].Columns.Add("col2_1", typeof(bool));
                request.data.Tables[1].Columns.Add("col2_2", typeof(decimal));
                request.data.Tables[1].Rows.Add(true, 1.0m);
                request.data.Tables[1].Rows.Add(false, 99.0m);
                this.CustomiseProcessDataSet(request);
                _testContext.BeginTimer("GeneratedSampleTest_ProcessDataSet");
                try
                {
                    return dataSetsClient.ProcessDataSet(request);
                }
                finally
                {
                    _testContext.EndTimer("GeneratedSampleTest_ProcessDataSet");
                }
            }
            finally
            {
                request.data.Dispose();
            }
        }
        
        private GeneratedContracts.ProcessDataSetWithMoreDataResponse ProcessDataSetWithMoreData()
        {
            GeneratedContracts.ProcessDataSetWithMoreDataRequest request = new GeneratedContracts.ProcessDataSetWithMoreDataRequest();
            try
            {
                request.data = new System.Data.DataSet();
                request.data.Locale = System.Globalization.CultureInfo.InvariantCulture;
                request.data.Tables.Add(new System.Data.DataTable("table1", "urn:table1"));
                request.data.Tables[0].Locale = System.Globalization.CultureInfo.InvariantCulture;
                request.data.Tables[0].Columns.Add("col1_1", typeof(int));
                request.data.Tables[0].Columns.Add("col1_2", typeof(string));
                request.data.Tables[0].Rows.Add(1, "hello1");
                request.data.Tables[0].Rows.Add(2, "hello2");
                request.data.Tables[0].Rows.Add(System.DBNull.Value, System.DBNull.Value);
                request.data.Tables.Add(new System.Data.DataTable("table2", "urn:table2"));
                request.data.Tables[1].Locale = System.Globalization.CultureInfo.InvariantCulture;
                request.data.Tables[1].Columns.Add("col2_1", typeof(bool));
                request.data.Tables[1].Columns.Add("col2_2", typeof(decimal));
                request.data.Tables[1].Rows.Add(true, 1.0m);
                request.data.Tables[1].Rows.Add(false, 99.0m);
                request.somedata = 1;
                this.CustomiseProcessDataSetWithMoreData(request);
                _testContext.BeginTimer("GeneratedSampleTest_ProcessDataSetWithMoreData");
                try
                {
                    return dataSetsClient.ProcessDataSetWithMoreData(request);
                }
                finally
                {
                    _testContext.EndTimer("GeneratedSampleTest_ProcessDataSetWithMoreData");
                }
            }
            finally
            {
                request.data.Dispose();
            }
        }
        
        private GeneratedContracts.ProcessCompoundDataSetResponse ProcessCompoundDataSet()
        {
            GeneratedContracts.ProcessCompoundDataSetRequest request = new GeneratedContracts.ProcessCompoundDataSetRequest();
            request.data = new GeneratedContracts.CompoundWithDataSet();
            try
            {
                request.data.Data = new System.Data.DataSet();
                request.data.Data.Locale = System.Globalization.CultureInfo.InvariantCulture;
                request.data.Data.Tables.Add(new System.Data.DataTable("table1", "urn:table1"));
                request.data.Data.Tables[0].Locale = System.Globalization.CultureInfo.InvariantCulture;
                request.data.Data.Tables[0].Columns.Add("col1_1", typeof(int));
                request.data.Data.Tables[0].Columns.Add("col1_2", typeof(string));
                request.data.Data.Tables[0].Rows.Add(1, "hello1");
                request.data.Data.Tables[0].Rows.Add(2, "hello2");
                request.data.Data.Tables[0].Rows.Add(System.DBNull.Value, System.DBNull.Value);
                request.data.Data.Tables.Add(new System.Data.DataTable("table2", "urn:table2"));
                request.data.Data.Tables[1].Locale = System.Globalization.CultureInfo.InvariantCulture;
                request.data.Data.Tables[1].Columns.Add("col2_1", typeof(bool));
                request.data.Data.Tables[1].Columns.Add("col2_2", typeof(decimal));
                request.data.Data.Tables[1].Rows.Add(true, 1.0m);
                request.data.Data.Tables[1].Rows.Add(false, 99.0m);
                this.CustomiseProcessCompoundDataSet(request);
                _testContext.BeginTimer("GeneratedSampleTest_ProcessCompoundDataSet");
                try
                {
                    return dataSetsClient.ProcessCompoundDataSet(request);
                }
                finally
                {
                    _testContext.EndTimer("GeneratedSampleTest_ProcessCompoundDataSet");
                }
            }
            finally
            {
                request.data.Data.Dispose();
            }
        }
        
        private GeneratedContracts.ProcessTypedDataSetResponse ProcessTypedDataSet()
        {
            GeneratedContracts.ProcessTypedDataSetRequest request = new GeneratedContracts.ProcessTypedDataSetRequest();
            try
            {
                request.data = new GeneratedContracts.TypedDataSet();
                request.data.Locale = System.Globalization.CultureInfo.InvariantCulture;
                request.data.Tables[0].Locale = System.Globalization.CultureInfo.InvariantCulture;
                request.data.Tables[0].Rows.Add("hello1", 1, new System.DateTime(2010, 6, 29, 0, 0, 0, 0));
                request.data.Tables[0].Rows.Add("hello2", 2, new System.DateTime(2010, 5, 29, 0, 0, 0, 0));
                request.data.Tables[0].Rows.Add(System.DBNull.Value, System.DBNull.Value, System.DBNull.Value);
                this.CustomiseProcessTypedDataSet(request);
                _testContext.BeginTimer("GeneratedSampleTest_ProcessTypedDataSet");
                try
                {
                    return dataSetsClient.ProcessTypedDataSet(request);
                }
                finally
                {
                    _testContext.EndTimer("GeneratedSampleTest_ProcessTypedDataSet");
                }
            }
            finally
            {
                request.data.Dispose();
            }
        }
        
        private GeneratedContracts.ProcessCompoundTypedDataSetResponse ProcessCompoundTypedDataSet()
        {
            GeneratedContracts.ProcessCompoundTypedDataSetRequest request = new GeneratedContracts.ProcessCompoundTypedDataSetRequest();
            request.data = new GeneratedContracts.CompoundWithTypedDataSet();
            try
            {
                request.data.Data = new GeneratedContracts.TypedDataSet();
                request.data.Data.Locale = System.Globalization.CultureInfo.InvariantCulture;
                request.data.Data.Tables[0].Locale = System.Globalization.CultureInfo.InvariantCulture;
                request.data.Data.Tables[0].Rows.Add("hello1", 1, new System.DateTime(2010, 6, 29, 0, 0, 0, 0));
                request.data.Data.Tables[0].Rows.Add("hello2", 2, new System.DateTime(2010, 5, 29, 0, 0, 0, 0));
                request.data.Data.Tables[0].Rows.Add(System.DBNull.Value, System.DBNull.Value, System.DBNull.Value);
                this.CustomiseProcessCompoundTypedDataSet(request);
                _testContext.BeginTimer("GeneratedSampleTest_ProcessCompoundTypedDataSet");
                try
                {
                    return dataSetsClient.ProcessCompoundTypedDataSet(request);
                }
                finally
                {
                    _testContext.EndTimer("GeneratedSampleTest_ProcessCompoundTypedDataSet");
                }
            }
            finally
            {
                request.data.Data.Dispose();
            }
        }
    }
}
