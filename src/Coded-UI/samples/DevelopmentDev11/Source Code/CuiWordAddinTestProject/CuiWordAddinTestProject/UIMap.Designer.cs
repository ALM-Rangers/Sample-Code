// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CuiWordAddinTestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// EnterSelectText - Use 'EnterSelectTextParams' to pass parameters into this method.
        /// </summary>
        public void EnterSelectText()
        {
            #region Variable Declarations
            UITestControl uIDocument1Document = this.UIDocument1MicrosoftWoWindow.UIMicrosoftWordDocumenWindow.UIDocument1Document;
            #endregion

            // Type 'The ' in 'Document1' document
            Keyboard.SendKeys(uIDocument1Document, this.EnterSelectTextParams.UIDocument1DocumentSendKeys, ModifierKeys.None);

            // Type '{LShiftKey}' in 'Document1' document
            Keyboard.SendKeys(uIDocument1Document, this.EnterSelectTextParams.UIDocument1DocumentSendKeys1, ModifierKeys.None);

            // Type 'Coded UI Word 2010 Add-in will record this text and execute an assertion on the ' in 'Document1' document
            Keyboard.SendKeys(uIDocument1Document, this.EnterSelectTextParams.UIDocument1DocumentSendKeys2, ModifierKeys.None);

            // Type 'selected text.{Left}{Left}{Left}{Left}{Left}{Left}' in 'Document1' document
            Keyboard.SendKeys(uIDocument1Document, this.EnterSelectTextParams.UIDocument1DocumentSendKeys3, ModifierKeys.None);

            // Type 'Control, Shift + {Left}' in 'Document1' document
            Keyboard.SendKeys(uIDocument1Document, this.EnterSelectTextParams.UIDocument1DocumentSendKeys4, (ModifierKeys.Control | ModifierKeys.Shift));
        }
        
        /// <summary>
        /// AssertText - Use 'AssertTextExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertText()
        {
            #region Variable Declarations
            UITestControl uIDocument18492Document = this.UIDocument1MicrosoftWoWindow.UIMicrosoftWordDocumenWindow.UIDocument1Document.UIDocument18492Document;
            #endregion

            // Verify that 'Document1[84, 92]' document's property 'StartIndex' equals '84'
            Assert.AreEqual(this.AssertTextExpectedValues.UIDocument18492DocumentStartIndex, uIDocument18492Document.GetProperty("StartIndex"));
        }
        
        #region Properties
        public virtual EnterSelectTextParams EnterSelectTextParams
        {
            get
            {
                if ((this.mEnterSelectTextParams == null))
                {
                    this.mEnterSelectTextParams = new EnterSelectTextParams();
                }
                return this.mEnterSelectTextParams;
            }
        }
        
        public virtual AssertTextExpectedValues AssertTextExpectedValues
        {
            get
            {
                if ((this.mAssertTextExpectedValues == null))
                {
                    this.mAssertTextExpectedValues = new AssertTextExpectedValues();
                }
                return this.mAssertTextExpectedValues;
            }
        }
        
        public UIDocument1MicrosoftWoWindow UIDocument1MicrosoftWoWindow
        {
            get
            {
                if ((this.mUIDocument1MicrosoftWoWindow == null))
                {
                    this.mUIDocument1MicrosoftWoWindow = new UIDocument1MicrosoftWoWindow();
                }
                return this.mUIDocument1MicrosoftWoWindow;
            }
        }
        #endregion
        
        #region Fields
        private EnterSelectTextParams mEnterSelectTextParams;
        
        private AssertTextExpectedValues mAssertTextExpectedValues;
        
        private UIDocument1MicrosoftWoWindow mUIDocument1MicrosoftWoWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnterSelectText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class EnterSelectTextParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%ProgramFiles(x86)%\Microsoft Office\Office14\WINWORD.EXE'
        /// </summary>
        public string ExePath = "C:\\Program Files (x86)\\Microsoft Office\\Office14\\WINWORD.EXE";
        
        /// <summary>
        /// Launch '%ProgramFiles(x86)%\Microsoft Office\Office14\WINWORD.EXE'
        /// </summary>
        public string AlternateExePath = "%ProgramFiles(x86)%\\Microsoft Office\\Office14\\WINWORD.EXE";
        
        /// <summary>
        /// Type 'The ' in 'Document1' document
        /// </summary>
        public string UIDocument1DocumentSendKeys = "The ";
        
        /// <summary>
        /// Type '{LShiftKey}' in 'Document1' document
        /// </summary>
        public string UIDocument1DocumentSendKeys1 = "{LShiftKey}";
        
        /// <summary>
        /// Type 'Coded UI Word 2010 Add-in will record this text and execute an assertion on the ' in 'Document1' document
        /// </summary>
        public string UIDocument1DocumentSendKeys2 = "Coded UI Word 2010 Add-in will record this text and execute an assertion on the ";
        
        /// <summary>
        /// Type 'selected text.{Left}{Left}{Left}{Left}{Left}{Left}' in 'Document1' document
        /// </summary>
        public string UIDocument1DocumentSendKeys3 = "selected text.{Left}{Left}{Left}{Left}{Left}{Left}";
        
        /// <summary>
        /// Type 'Control, Shift + {Left}' in 'Document1' document
        /// </summary>
        public string UIDocument1DocumentSendKeys4 = "{Left}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertTextExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Document1[84, 92]' document's property 'StartIndex' equals '84'
        /// </summary>
        public int UIDocument18492DocumentStartIndex = 84;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDocument1MicrosoftWoWindow : WinWindow
    {
        
        public UIDocument1MicrosoftWoWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Document1 - Microsoft Word";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "OpusApp";
            this.WindowTitles.Add("Document1 - Microsoft Word");
            #endregion
        }
        
        #region Properties
        public UIMicrosoftWordDocumenWindow UIMicrosoftWordDocumenWindow
        {
            get
            {
                if ((this.mUIMicrosoftWordDocumenWindow == null))
                {
                    this.mUIMicrosoftWordDocumenWindow = new UIMicrosoftWordDocumenWindow(this);
                }
                return this.mUIMicrosoftWordDocumenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMicrosoftWordDocumenWindow mUIMicrosoftWordDocumenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMicrosoftWordDocumenWindow : WinWindow
    {
        
        public UIMicrosoftWordDocumenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Microsoft Word Document";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "_WwG";
            this.WindowTitles.Add("Document1 - Microsoft Word");
            #endregion
        }
        
        #region Properties
        public UIDocument1Document UIDocument1Document
        {
            get
            {
                if ((this.mUIDocument1Document == null))
                {
                    this.mUIDocument1Document = new UIDocument1Document(this);
                }
                return this.mUIDocument1Document;
            }
        }
        #endregion
        
        #region Fields
        private UIDocument1Document mUIDocument1Document;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDocument1Document : UITestControl
    {
        
        public UIDocument1Document(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.TechnologyName = "Word";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Document1";
            this.WindowTitles.Add("Document1 - Microsoft Word");
            #endregion
        }
        
        #region Properties
        public UITestControl UIDocument18387Document
        {
            get
            {
                if ((this.mUIDocument18387Document == null))
                {
                    this.mUIDocument18387Document = new UITestControl(this);
                    #region Search Criteria
                    this.mUIDocument18387Document.TechnologyName = "Word";
                    this.mUIDocument18387Document.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
                    this.mUIDocument18387Document.SearchProperties["StartIndex"] = "83";
                    this.mUIDocument18387Document.SearchProperties["EndIndex"] = "87";
                    this.mUIDocument18387Document.WindowTitles.Add("Document1 - Microsoft Word");
                    #endregion
                }
                return this.mUIDocument18387Document;
            }
        }
        
        public UITestControl UIDocument18492Document
        {
            get
            {
                if ((this.mUIDocument18492Document == null))
                {
                    this.mUIDocument18492Document = new UITestControl(this);
                    #region Search Criteria
                    this.mUIDocument18492Document.TechnologyName = "Word";
                    this.mUIDocument18492Document.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
                    this.mUIDocument18492Document.SearchProperties["StartIndex"] = "84";
                    this.mUIDocument18492Document.SearchProperties["EndIndex"] = "92";
                    this.mUIDocument18492Document.WindowTitles.Add("Document1 - Microsoft Word");
                    #endregion
                }
                return this.mUIDocument18492Document;
            }
        }
        #endregion
        
        #region Fields
        private UITestControl mUIDocument18387Document;
        
        private UITestControl mUIDocument18492Document;
        #endregion
    }
}
